{
    "docs": [
        {
            "location": "/", 
            "text": "Mocha\n\n\n\n\n\n \nA batteries included, front-end loaded, web and Restful framework built on Flask.\n\n \n\n\n\n\nMocha helps you build and structure your application, where your endpoints are natively created from your view names.\n\n\nIf you already know Flask, you pretty much know 95% of Mocha.\n\n\n\n\nQuick Start\n\n\nInstall\n\n\npip install mocha\n\n\n\n\n\nSetup\n\n\nmocha\n \n:\ninit\n\n\n\n\n\n\nServe\n\n\nmocha\n \n:\nserve\n\n\n\n\n\n\n\n\nFeatures\n\n\nClass based views\n\n\nMocha groups your views together by class. The class name becomes the base route of all the methods.\nMocha expects the methods to return dict.\n\n\nfrom\n \nmocha\n \nimport\n \nMocha\n\n\n\nclass\n \nIndex\n(\nMocha\n):\n\n    \ndef\n \nindex\n(\nself\n):\n\n        \nreturn\n \n{\n\n            \nname\n:\n \nMocha\n,\n\n            \nversion\n:\n \n1.0\n\n        \n}\n\n\n    \ndef\n \nhello_world\n(\nself\n):\n\n        \nreturn\n \n{\n\n            \nhello\n:\n \nworld\n\n        \n}\n\n\n\nclass\n \nDocument\n(\nMocha\n):\n\n    \ndef\n \nindex\n(\nself\n):\n\n        \nreturn\n\n\n    \ndef\n \nabout\n(\nself\n):\n\n        \nreturn\n\n\n\n\n\n\n\n\nSmart Routing\n\n\nSmart routing is created by using the class name and the method name. Class or method named \nIndex\n or \nindex\n respectively,\nwill become the root; otherwise the class name will be the base root name, and all of its methods will be prefixed with it.\n\n\nfrom\n \nmocha\n \nimport\n \nMocha\n\n\n\nclass\n \nIndex\n(\nMocha\n):\n\n\n    \ndef\n \nindex\n(\nself\n):\n\n        \n# -\n http://127.0.0.1/\n\n\n        \nreturn\n \n{\n\n            \nname\n:\n \nMocha\n,\n\n            \nversion\n:\n \n1.0\n\n        \n}\n\n\n    \ndef\n \nhello_world\n(\nself\n):\n\n        \n# -\n http://127.0.0.1/hello-world\n\n\n        \nreturn\n \n{\n\n            \nhello\n:\n \nworld\n\n        \n}\n\n\n\nclass\n \nAccount\n(\nMocha\n):\n\n\n    \ndef\n \nindex\n(\nself\n):\n\n        \n# -\n http://127.0.0.1/account\n\n\n        \nreturn\n \n{\n\n            \nname\n:\n \nMocha\n,\n\n            \nversion\n:\n \n1.0\n\n        \n}\n\n\n    \ndef\n \ninfo\n(\nself\n):\n\n        \n# -\n http://127.0.0.1/account/info\n\n\n        \nreturn\n \n{\n\n            \nname\n:\n \nMardix\n\n        \n}\n\n\n\nclass\n \nDocument\n(\nMocha\n):\n\n\n    \ndef\n \nindex\n(\nself\n):\n\n        \n# -\n http://127.0.0.1/document/\n\n\n        \nreturn\n \n{\n\n            \ndocs\n:\n \n[\n\n\n            \n]\n\n        \n}\n\n\n    \ndef\n \nget\n(\nself\n,\n \nid\n):\n\n        \n# -\n http://127.0.0.1/document/1234\n\n        \nreturn\n \n{\n\n            \ntitle\n:\n \nDoc title\n\n        \n}\n\n\n\n\n\n\n\n\nCustom Route\n\n\nJust like Flask, you can use the \nmocha.route\n decorator for custom routes. If the the class is decorated, all the\nthe methods will inherit the parent route.\n\n\nfrom\n \nmocha\n \nimport\n \nMocha\n,\n \ndecorators\n \nas\n \ndeco\n\n\n\n@deco.route\n(\n/the-great-catalog\n)\n\n\nclass\n \nCatalog\n(\nMocha\n):\n\n\n    \n@deco.route\n(\n/list/\n)\n\n    \ndef\n \nindex\n(\nself\n):\n\n        \n# -\n http://127.0.0.1/the-great-catalog/lists\n\n\n        \nreturn\n \n{\n\n            \nmy_collections\n:\n \n[\n\n                \n{\n\n                    \nid\n:\n \n123\n,\n\n                    \n...\n\n                \n},\n\n                \n...\n\n            \n]\n\n        \n}\n\n\n\n\n\n\n\n\nRESTful\n\n\nMocha has some reserved methods name: \nget\n, \npost\n, \nput\n, \ndelete\n, \nupdate\n. They required the \nrequest.method\n  to be\nthe same as the name. By default all other methods are \nGET\n\n\nfrom\n \nmocha\n \nimport\n \nMocha\n\n\n\nclass\n \nIndex\n(\nMocha\n):\n\n\n    \ndef\n \nindex\n(\nself\n):\n\n        \n# -\n http://127.0.0.1/\n\n\n        \nreturn\n \n{\n\n            \nname\n:\n \nMocha\n,\n\n            \nversion\n:\n \n1.0\n\n        \n}\n\n\n    \ndef\n \nget\n(\nself\n,\n \nid\n):\n\n        \n# Accepts only GET method\n\n        \n# GET http://127.0.0.1/894\n\n\n        \nreturn\n \n{\n\n        \n}\n\n\n    \ndef\n \npost\n(\nself\n,\n \nid\n):\n\n        \n# Accept only POST method\n\n        \n# POST http://127.0.0.1/894\n\n        \n# do something in post\n\n\n    \ndef\n \ndelete\n(\nself\n,\n \nid\n):\n\n        \n# Accept only DELETE method\n\n        \n# DELETE http://127.0.0.1/894\n\n        \n# do something in delete\n\n\n    \ndef\n \nput\n(\nself\n,\n \nid\n):\n\n        \n# Accept only PUT\n\n\n\n\n\n\n\n\nMultiple renders: JSON, XML\n\n\nYou can quickly render your views to json or xml. By default it's HTML\n\n\nfrom\n \nmocha\n \nimport\n \nMocha\n,\n \ndecorators\n \nas\n \ndeco\n\n\n\n@deco.render_json\n\n\nclass\n \nIndex\n(\nMocha\n):\n\n\n    \ndef\n \nindex\n(\nself\n):\n\n        \nreturn\n \n{\n\n            \nname\n:\n \nMocha\n,\n\n            \nversion\n:\n \n1.0\n\n        \n}\n\n\n    \ndef\n \nhello_world\n(\nself\n):\n\n        \nreturn\n \n{\n\n            \nhello\n:\n \nworld\n\n        \n}\n\n\n\nclass\n \nCatalog\n(\nMocha\n):\n\n\n    \ndef\n \nindex\n(\nself\n):\n\n        \nreturn\n \n{\n\n            \nmy_collections\n:\n \n[\n\n                \n{\n\n                    \nid\n:\n \n123\n,\n\n                    \n...\n\n                \n},\n\n                \n...\n\n            \n]\n\n        \n}\n\n\n\n\n\n\n\n\nBuilt-in Nav Title\n\n\nAs you are creating your views, you can also build the navigation menu, by using \n@decorators.nav_title\n\n\nfrom\n \nmocha\n \nimport\n \nMocha\n,\n \ndecorators\n \nas\n \ndeco\n\n\n\n@deco.nav_title\n(\nThe Great Catalog\n)\n\n\nclass\n \nCatalog\n(\nMocha\n):\n\n\n    \n@deco.nav_title\n(\nAll\n)\n\n    \ndef\n \nindex\n(\nself\n):\n\n        \nreturn\n \n{\n\n            \nmy_collections\n:\n \n[\n\n                \n{\n\n                    \nid\n:\n \n123\n,\n\n                    \n...\n\n                \n},\n\n                \n...\n\n            \n]\n\n        \n}\n\n\n\n\n\n\n\n\nAdmin\n\n\nMocha allows you to quickly turn your views into restricted admin area.\n\n\nAccessing \nhttp://127.0.0.1/admin/catalog\n will require you to login\n\n\nfrom\n \nmocha\n \nimport\n \nMocha\n,\n \ndecorators\n \nas\n \ndeco\n\n\nimport\n \nmocha.contrib\n\n\n\n@deco.nav_title\n(\nCatalog\n)\n\n\n@deco.route\n(\n/admin/catalog\n)\n\n\n@mocha.contrib.admin\n\n\nclass\n \nCatalogAdmin\n(\nMocha\n):\n\n\n    \n@deco.nav_title\n(\nAll\n)\n\n    \ndef\n \nindex\n(\nself\n):\n\n        \nreturn\n \n{\n\n            \nmy_collections\n:\n \n[\n\n                \n{\n\n                    \nid\n:\n \n123\n,\n\n                    \n...\n\n                \n},\n\n                \n...\n\n            \n]\n\n        \n}\n\n\n\n\n\n\n\n\nInterceptors\n\n\nSometimes you may want to do something before or after request, Mocha helps you with that.\n\n\nfrom\n \nmocha\n \nimport\n \nMocha\n\n\n\nclass\n \nIndex\n(\nMocha\n):\n\n\n    \ndef\n \nbefore_request\n(\nself\n,\n \nname\n,\n \n*\nargs\n,\n \n**\nkwargs\n):\n\n        \npass\n\n\n    \ndef\n \nafter_request\n(\nself\n,\n \nname\n,\n \nresponse\n):\n\n\n        \nreturn\n \nresponse\n\n\n\n\n\n\n\n\nJade markup\n\n\nFor aesthetic reason, Mocha uses by default Jade (now Pug) template. This can switched if you want to use HTML file only\n\n\n.row\n\n    \n.col-md-12\n\n        \nh1.text-center\n\n            \n|\n \nHello\n \nMocha\n\n\n\n\n\n\nBecomes\n\n\ndiv\n \nclass=\nrow\n\n    \ndiv\n \nclass=\ncol-md-12\n\n        \nh1\n \nclass=\ntext-center\n\n            Hello Mocha\n        \n/h1\n\n    \n/div\n\n\n/div\n\n\n\n\n\n\n\n\nMarkdown friendly\n\n\n\n\nBuilt-in contrib\n\n\n\n\n\n\nUser Auth : It allows to authenticate users into the application. Contains the following pages:\n\n\n\n\nlogin\n\n\nsignup\n\n\nlost-password\n\n\naccount-settings\n\n\nadmin interface\n\n\n\n\n\n\n\n\nContact Us\n\n\n\n\n\n\nError: Error pages\n\n\n\n\n\n\nAdmin Interface: Create authenticated admin area\n\n\n\n\n\n\nMaintenance page: To turn the site on and off\n\n\n\n\n\n\n\n\nFeatures List\n\n\n\n\n\n\nSmart routing: automatically generates routes based on the classes and methods in your views\n\n\n\n\n\n\nClass name as the base url, ie: class UserAccount will be accessed at '/user-account'\n\n\n\n\n\n\nClass methods (action) could be accessed: hello_world(self) becomes 'hello-world'\n\n\n\n\n\n\nEasy rending and render decorator\n\n\n\n\n\n\nAuto route can be edited with @route()\n\n\n\n\n\n\nRestful: GET, POST, PUT, DELETE\n\n\n\n\n\n\nREST API Ready\n\n\n\n\n\n\nJade as default template language\n\n\n\n\n\n\nMarkdown friendly. Inclusion of a markdown file will turn into HTML\n\n\n\n\n\n\nbcrypt\n is chosen as the password hasher\n\n\n\n\n\n\nSession: Redis, AWS S3, Google Storage, SQLite, MySQL, PostgreSQL\n\n\n\n\n\n\nDatabase/ORM: \nActive-Alchemy\n (SQLALchemy wrapper)\n\n\n\n\n\n\nReCaptcha: \nFlask-Recaptcha\n\n\n\n\n\n\nCSRF on all POST\n\n\n\n\n\n\nStorage: Local, S3, Google Storage \nFlask-Cloudy\n\n\n\n\n\n\nMailer (SES or SMTP)\n\n\n\n\n\n\nArrow for date and time\n\n\n\n\n\n\nCaching\n\n\n\n\n\n\nJWT\n\n\n\n\n\n\nPagination\n\n\n\n\n\n\nSignals\n\n\n\n\n\n\nFontawesome\n\n\n\n\n\n\nBootstrap 3\n\n\n\n\n\n\nBootswatch\n\n\n\n\n\n\nMarkdown\n\n\n\n\n\n\nPropel for deployment\n\n\n\n\n\n\nSmart routing: automatically generates routes based on the classes and methods in your views\n\n\n\n\n\n\nClass name as the base url, ie: class UserAccount will be accessed at '/user-account'\n\n\n\n\n\n\nClass methods (action) could be accessed: hello_world(self) becomes 'hello-world'\n\n\n\n\n\n\nSmart Rendering without adding any blocks in your templates\n\n\n\n\n\n\nAuto rendering by returning a dict or None\n\n\n\n\n\n\nUse Jade (Pug) template by default, but you can also use HTML.\n\n\n\n\n\n\nTemplates are mapped as the model in the class the $module/$class/$method.jade\n\n\n\n\n\n\nMarkdown ready: Along with Jade and HTML, it can also properly parse Markdown\n\n\n\n\n\n\nAuto route can be edited with @route()\n\n\n\n\n\n\nRestful: GET, POST, PUT, DELETE\n\n\n\n\n\n\nREST API Ready\n\n\n\n\n\n\nbcrypt\n is chosen as the password hasher\n\n\n\n\n\n\nSession: Redis, AWS S3, Google Storage, SQLite, MySQL, PostgreSQL\n\n\n\n\n\n\nORM: \nActive-Alchemy\n (SQLALchemy wrapper)\n\n\n\n\n\n\nReCaptcha: \nFlask-Recaptcha\n\n\n\n\n\n\nArrow for dates\n\n\n\n\n\n\nActive-Alchemy for database and dates are saved as Arrow object\n\n\n\n\n\n\nAll dates are by default UTC\n\n\n\n\n\n\nDate can be presented in specific timezone\n\n\n\n\n\n\nCSRF on all POST\n\n\n\n\n\n\nStorage: Local, S3, Google Storage \nFlask-Cloudy\n\n\n\n\n\n\nMailer (SES or SMTP)\n\n\n\n\n\n\nCaching\n\n\n\n\n\n\nSignals to dispatch messages and data to other part of the application\n\n\n\n\n\n\nJWT\n\n\n\n\n\n\nDefault Layout\n\n\n\n\n\n\nAdmin interface\n\n\n\n\n\n\nMulti application\n\n\n\n\n\n\nWeb Assets\n\n\n\n\n\n\nPropel for deployment\n\n\n\n\n\n\nDecorators, lots of decorators\n\n\n\n\n\n\n\n\nPackages and utilities depencies:\n\n\n\n\nFlask\n\n\nFlask-Assets\n\n\ncssmin\n\n\njsmin\n\n\nflask-recaptcha\n\n\nflask-login\n\n\nflask-kvsession\n\n\nflask-s3\n\n\nflask-mail\n\n\nflask-caching\n\n\nflask-cloudy\n\n\nflask-seasurf\n\n\nflask-babel\n\n\nflask-cors\n\n\nFlask-OAuthlib\n\n\nActive-Alchemy\n\n\nPaginator\n\n\nsix\n\n\npasslib\n\n\nbcrypt\n\n\npython-slugify\n\n\nhumanize\n\n\nredis\n\n\nses-mailer\n\n\nmarkdown\n\n\ninflection\n\n\npyyaml\n\n\nclick\n\n\nsh\n\n\ndicttoxml\n\n\narrow\n\n\nblinker\n\n\nitsdangerous\n\n\npyjade\n\n\nrequests\n\n\n\n\n\n\nCredits: Flask, Flask-Classy", 
            "title": "Home"
        }, 
        {
            "location": "/#mocha", 
            "text": "", 
            "title": "Mocha"
        }, 
        {
            "location": "/#quick-start", 
            "text": "", 
            "title": "Quick Start"
        }, 
        {
            "location": "/#install", 
            "text": "pip install mocha", 
            "title": "Install"
        }, 
        {
            "location": "/#setup", 
            "text": "mocha   : init", 
            "title": "Setup"
        }, 
        {
            "location": "/#serve", 
            "text": "mocha   : serve", 
            "title": "Serve"
        }, 
        {
            "location": "/#features", 
            "text": "", 
            "title": "Features"
        }, 
        {
            "location": "/#class-based-views", 
            "text": "Mocha groups your views together by class. The class name becomes the base route of all the methods.\nMocha expects the methods to return dict.  from   mocha   import   Mocha  class   Index ( Mocha ): \n     def   index ( self ): \n         return   { \n             name :   Mocha , \n             version :   1.0 \n         } \n\n     def   hello_world ( self ): \n         return   { \n             hello :   world \n         }  class   Document ( Mocha ): \n     def   index ( self ): \n         return \n\n     def   about ( self ): \n         return", 
            "title": "Class based views"
        }, 
        {
            "location": "/#smart-routing", 
            "text": "Smart routing is created by using the class name and the method name. Class or method named  Index  or  index  respectively,\nwill become the root; otherwise the class name will be the base root name, and all of its methods will be prefixed with it.  from   mocha   import   Mocha  class   Index ( Mocha ): \n\n     def   index ( self ): \n         # -  http://127.0.0.1/ \n\n         return   { \n             name :   Mocha , \n             version :   1.0 \n         } \n\n     def   hello_world ( self ): \n         # -  http://127.0.0.1/hello-world \n\n         return   { \n             hello :   world \n         }  class   Account ( Mocha ): \n\n     def   index ( self ): \n         # -  http://127.0.0.1/account \n\n         return   { \n             name :   Mocha , \n             version :   1.0 \n         } \n\n     def   info ( self ): \n         # -  http://127.0.0.1/account/info \n\n         return   { \n             name :   Mardix \n         }  class   Document ( Mocha ): \n\n     def   index ( self ): \n         # -  http://127.0.0.1/document/ \n\n         return   { \n             docs :   [ \n\n             ] \n         } \n\n     def   get ( self ,   id ): \n         # -  http://127.0.0.1/document/1234 \n         return   { \n             title :   Doc title \n         }", 
            "title": "Smart Routing"
        }, 
        {
            "location": "/#custom-route", 
            "text": "Just like Flask, you can use the  mocha.route  decorator for custom routes. If the the class is decorated, all the\nthe methods will inherit the parent route.  from   mocha   import   Mocha ,   decorators   as   deco  @deco.route ( /the-great-catalog )  class   Catalog ( Mocha ): \n\n     @deco.route ( /list/ ) \n     def   index ( self ): \n         # -  http://127.0.0.1/the-great-catalog/lists \n\n         return   { \n             my_collections :   [ \n                 { \n                     id :   123 , \n                     ... \n                 }, \n                 ... \n             ] \n         }", 
            "title": "Custom Route"
        }, 
        {
            "location": "/#restful", 
            "text": "Mocha has some reserved methods name:  get ,  post ,  put ,  delete ,  update . They required the  request.method   to be\nthe same as the name. By default all other methods are  GET  from   mocha   import   Mocha  class   Index ( Mocha ): \n\n     def   index ( self ): \n         # -  http://127.0.0.1/ \n\n         return   { \n             name :   Mocha , \n             version :   1.0 \n         } \n\n     def   get ( self ,   id ): \n         # Accepts only GET method \n         # GET http://127.0.0.1/894 \n\n         return   { \n         } \n\n     def   post ( self ,   id ): \n         # Accept only POST method \n         # POST http://127.0.0.1/894 \n         # do something in post \n\n     def   delete ( self ,   id ): \n         # Accept only DELETE method \n         # DELETE http://127.0.0.1/894 \n         # do something in delete \n\n     def   put ( self ,   id ): \n         # Accept only PUT", 
            "title": "RESTful"
        }, 
        {
            "location": "/#multiple-renders-json-xml", 
            "text": "You can quickly render your views to json or xml. By default it's HTML  from   mocha   import   Mocha ,   decorators   as   deco  @deco.render_json  class   Index ( Mocha ): \n\n     def   index ( self ): \n         return   { \n             name :   Mocha , \n             version :   1.0 \n         } \n\n     def   hello_world ( self ): \n         return   { \n             hello :   world \n         }  class   Catalog ( Mocha ): \n\n     def   index ( self ): \n         return   { \n             my_collections :   [ \n                 { \n                     id :   123 , \n                     ... \n                 }, \n                 ... \n             ] \n         }", 
            "title": "Multiple renders: JSON, XML"
        }, 
        {
            "location": "/#built-in-nav-title", 
            "text": "As you are creating your views, you can also build the navigation menu, by using  @decorators.nav_title  from   mocha   import   Mocha ,   decorators   as   deco  @deco.nav_title ( The Great Catalog )  class   Catalog ( Mocha ): \n\n     @deco.nav_title ( All ) \n     def   index ( self ): \n         return   { \n             my_collections :   [ \n                 { \n                     id :   123 , \n                     ... \n                 }, \n                 ... \n             ] \n         }", 
            "title": "Built-in Nav Title"
        }, 
        {
            "location": "/#admin", 
            "text": "Mocha allows you to quickly turn your views into restricted admin area.  Accessing  http://127.0.0.1/admin/catalog  will require you to login  from   mocha   import   Mocha ,   decorators   as   deco  import   mocha.contrib  @deco.nav_title ( Catalog )  @deco.route ( /admin/catalog )  @mocha.contrib.admin  class   CatalogAdmin ( Mocha ): \n\n     @deco.nav_title ( All ) \n     def   index ( self ): \n         return   { \n             my_collections :   [ \n                 { \n                     id :   123 , \n                     ... \n                 }, \n                 ... \n             ] \n         }", 
            "title": "Admin"
        }, 
        {
            "location": "/#interceptors", 
            "text": "Sometimes you may want to do something before or after request, Mocha helps you with that.  from   mocha   import   Mocha  class   Index ( Mocha ): \n\n     def   before_request ( self ,   name ,   * args ,   ** kwargs ): \n         pass \n\n     def   after_request ( self ,   name ,   response ): \n\n         return   response", 
            "title": "Interceptors"
        }, 
        {
            "location": "/#jade-markup", 
            "text": "For aesthetic reason, Mocha uses by default Jade (now Pug) template. This can switched if you want to use HTML file only  .row \n     .col-md-12 \n         h1.text-center \n             |   Hello   Mocha   Becomes  div   class= row \n     div   class= col-md-12 \n         h1   class= text-center \n            Hello Mocha\n         /h1 \n     /div  /div", 
            "title": "Jade markup"
        }, 
        {
            "location": "/#markdown-friendly", 
            "text": "", 
            "title": "Markdown friendly"
        }, 
        {
            "location": "/#built-in-contrib", 
            "text": "User Auth : It allows to authenticate users into the application. Contains the following pages:   login  signup  lost-password  account-settings  admin interface     Contact Us    Error: Error pages    Admin Interface: Create authenticated admin area    Maintenance page: To turn the site on and off", 
            "title": "Built-in contrib"
        }, 
        {
            "location": "/#features-list", 
            "text": "Smart routing: automatically generates routes based on the classes and methods in your views    Class name as the base url, ie: class UserAccount will be accessed at '/user-account'    Class methods (action) could be accessed: hello_world(self) becomes 'hello-world'    Easy rending and render decorator    Auto route can be edited with @route()    Restful: GET, POST, PUT, DELETE    REST API Ready    Jade as default template language    Markdown friendly. Inclusion of a markdown file will turn into HTML    bcrypt  is chosen as the password hasher    Session: Redis, AWS S3, Google Storage, SQLite, MySQL, PostgreSQL    Database/ORM:  Active-Alchemy  (SQLALchemy wrapper)    ReCaptcha:  Flask-Recaptcha    CSRF on all POST    Storage: Local, S3, Google Storage  Flask-Cloudy    Mailer (SES or SMTP)    Arrow for date and time    Caching    JWT    Pagination    Signals    Fontawesome    Bootstrap 3    Bootswatch    Markdown    Propel for deployment    Smart routing: automatically generates routes based on the classes and methods in your views    Class name as the base url, ie: class UserAccount will be accessed at '/user-account'    Class methods (action) could be accessed: hello_world(self) becomes 'hello-world'    Smart Rendering without adding any blocks in your templates    Auto rendering by returning a dict or None    Use Jade (Pug) template by default, but you can also use HTML.    Templates are mapped as the model in the class the $module/$class/$method.jade    Markdown ready: Along with Jade and HTML, it can also properly parse Markdown    Auto route can be edited with @route()    Restful: GET, POST, PUT, DELETE    REST API Ready    bcrypt  is chosen as the password hasher    Session: Redis, AWS S3, Google Storage, SQLite, MySQL, PostgreSQL    ORM:  Active-Alchemy  (SQLALchemy wrapper)    ReCaptcha:  Flask-Recaptcha    Arrow for dates    Active-Alchemy for database and dates are saved as Arrow object    All dates are by default UTC    Date can be presented in specific timezone    CSRF on all POST    Storage: Local, S3, Google Storage  Flask-Cloudy    Mailer (SES or SMTP)    Caching    Signals to dispatch messages and data to other part of the application    JWT    Default Layout    Admin interface    Multi application    Web Assets    Propel for deployment    Decorators, lots of decorators", 
            "title": "Features List"
        }, 
        {
            "location": "/#packages-and-utilities-depencies", 
            "text": "Flask  Flask-Assets  cssmin  jsmin  flask-recaptcha  flask-login  flask-kvsession  flask-s3  flask-mail  flask-caching  flask-cloudy  flask-seasurf  flask-babel  flask-cors  Flask-OAuthlib  Active-Alchemy  Paginator  six  passlib  bcrypt  python-slugify  humanize  redis  ses-mailer  markdown  inflection  pyyaml  click  sh  dicttoxml  arrow  blinker  itsdangerous  pyjade  requests    Credits: Flask, Flask-Classy", 
            "title": "Packages and utilities depencies:"
        }, 
        {
            "location": "/setup/", 
            "text": "In here we're going to install, init and serve our \nMocha\n application\n\n\n\n\nInstall\n\n\nThe best way to install \nMocha\n is to do it with pip.\n\n\npip install mocha\n\n\n\n\n\nIt's preferable to install your Mocha app into it's own virtual environment.\n\n\n\n\nInit\n\n\nOnce installed, use the command line \nmocha\n to initiate the application.\n\n\nMake sure that you \ncd\n into the right directory to run the command, as it will place the data in the current working dir.\n\n\nSo run:\n\n\nmocha\n \n:\ninit\n\n\n\n\n\n\nIt will create all the necessary files to get going, and you should see a file structure similar to the one below\n\n\n/____\n    |\n    |- brew.py\n    |\n    |- propel.yml\n    |\n    |-- requirements.txt\n    |\n    |-- /application\n        |\n        |-- config.py\n        |\n        |-- models.py\n        |\n        |-- helpers.py\n        |\n        |-- manage.py\n        |\n        |-- views/\n            |\n            |-- main.py\n        |\n        |-- templates/\n            |\n            |-- layouts/\n                |\n                |-- base.jade\n                |\n            |-- main/\n                |\n                |-- Index/\n                    |\n                    |-- index.jade\n        |\n        |-- /static/\n            |\n            |-- assets.yml\n            |\n            |-- package.json\n            |\n            |-- css/\n            |\n            |-- js/\n            |\n            |-- imgs/\n        |\n        |-- /var/\n\n\n\n\n\nDescription:\n\n\n\n\nbrew.py\n is the application entry point\n\n\npropel.yml\n (optional) A deploy based config file\n\n\nrequirements.txt\n contains your requirements + mocha\n\n\napplication/\n contains the application's  models, config, helpers and manage\n\n\napplication/views/\n: contains your views modules\n\n\napplication/templates/\n: contains all templates relative to the views name\n\n\napplication/static/\n: contains all the app's assets: js, css, imgs, etc...\n\n\napplication/var/\n: contains var files: database, mail-template, uploads, etc...\n\n\n\n\n\n\nServe\n\n\nNow your Mocha app is ready to go, it's time to serve it.\n\n\nmocha\n \n:\nserve\n\n\n\n\n\n\nYou can access by default the application at: \nhttp://localhost:5000\n\n\nTo serve on a different port:\n\n\nmocha\n \n:\nserve\n \n--\nport\n \n5001\n\n\n\n\n\n\n-\n \nhttp://localhost:5001", 
            "title": "Setup"
        }, 
        {
            "location": "/setup/#install", 
            "text": "The best way to install  Mocha  is to do it with pip.  pip install mocha  It's preferable to install your Mocha app into it's own virtual environment.", 
            "title": "Install"
        }, 
        {
            "location": "/setup/#init", 
            "text": "Once installed, use the command line  mocha  to initiate the application.  Make sure that you  cd  into the right directory to run the command, as it will place the data in the current working dir.  So run:  mocha   : init   It will create all the necessary files to get going, and you should see a file structure similar to the one below  /____\n    |\n    |- brew.py\n    |\n    |- propel.yml\n    |\n    |-- requirements.txt\n    |\n    |-- /application\n        |\n        |-- config.py\n        |\n        |-- models.py\n        |\n        |-- helpers.py\n        |\n        |-- manage.py\n        |\n        |-- views/\n            |\n            |-- main.py\n        |\n        |-- templates/\n            |\n            |-- layouts/\n                |\n                |-- base.jade\n                |\n            |-- main/\n                |\n                |-- Index/\n                    |\n                    |-- index.jade\n        |\n        |-- /static/\n            |\n            |-- assets.yml\n            |\n            |-- package.json\n            |\n            |-- css/\n            |\n            |-- js/\n            |\n            |-- imgs/\n        |\n        |-- /var/  Description:   brew.py  is the application entry point  propel.yml  (optional) A deploy based config file  requirements.txt  contains your requirements + mocha  application/  contains the application's  models, config, helpers and manage  application/views/ : contains your views modules  application/templates/ : contains all templates relative to the views name  application/static/ : contains all the app's assets: js, css, imgs, etc...  application/var/ : contains var files: database, mail-template, uploads, etc...", 
            "title": "Init"
        }, 
        {
            "location": "/setup/#serve", 
            "text": "Now your Mocha app is ready to go, it's time to serve it.  mocha   : serve   You can access by default the application at:  http://localhost:5000  To serve on a different port:  mocha   : serve   -- port   5001   -   http://localhost:5001", 
            "title": "Serve"
        }, 
        {
            "location": "/first-app/", 
            "text": "If you haven't done so yet, you need to \nmocha :init\n in the directory that you want to install\n\n\nmocha\n \n:\ninit\n\n\n\n\n\n\nOnce created, you should see a file structure similar to this\n\n\n/____\n    |\n    |- brew.py\n    |\n    |- propel.yml\n    |\n    |-- requirements.txt\n    |\n    |-- /application\n        |\n        |-- config.py\n        |\n        |-- models.py\n        |\n        |-- helpers.py\n        |\n        |-- manage.py\n        |\n        |-- views/\n            |\n            |-- main.py\n        |\n        |-- templates/\n            |\n            |-- layouts/\n                |\n                |-- base.jade\n                |\n            |-- main/\n                |\n                |-- Index/\n                    |\n                    |-- index.jade\n        |\n        |-- /static/\n            |\n            |-- assets.yml\n            |\n            |-- package.json\n            |\n            |-- css/\n            |\n            |-- js/\n            |\n            |-- imgs/\n        |\n        |-- /var/\n\n\n\n\n\nDescription:\n\n\n\n\nbrew.py\n is the application entry point\n\n\npropel.yml\n (optional) A deploy based config file\n\n\nrequirements.txt\n contains your requirements + mocha\n\n\napplication/\n contains the application's  models, config, helpers and manage\n\n\napplication/views/\n: contains your views modules\n\n\napplication/templates/\n: contains all templates relative to the views name\n\n\napplication/static/\n: contains all the app's assets: js, css, imgs, etc...\n\n\napplication/var/\n: contains var files: database, mail-template, uploads, etc...\n\n\n\n\n\n\nYour first app\n\n\nHere's what Mocha will do, and expecting:\n\n\n\n\nthat your views are structured in class\n\n\nthe class inherits \nmocha.Mocha\n\n\nif the class name is \nIndex(Mocha)\n, it will be the base route as \n/\n\n\nthe methods are the views actions\n\n\nthe methods name will become the endpoint url\n\n\nif the method name is \nindex(self)\n, it will be the entry point of that view\n\n\nmethods name with underscore will be dasherized, \nabout_us(self)\n -\n \n/about-us/\n\n\nthe methods return data as dict type\n\n\nthe data returned is passed to your template\n\n\nthe template is named after the method name\n\n\nthe template is magically included in your layout\n\n\nMocha brews everything together, and renders the page\n\n\n\n\n\n\nViews\n\n\nAll your view module should be placed in \napplication/views\n. By default , \nmain.py\n view is created\n\n\nmain.py\n must contain at a least one class that inherits \nMocha\n. A view module may have multiple classes\n\n\napplication/views/main.py\n\n\nfrom\n \nmocha\n \nimport\n \nMocha\n,\n \npage_attr\n\n\n\nclass\n \nIndex\n(\nMocha\n):\n\n\n    \ndef\n \nindex\n(\nself\n):\n\n        \npage_attr\n(\nHello World\n)\n\n        \nreturn\n  \n{\n\n            \nname\n:\n \nMocha\n,\n\n            \nversion\n:\n \n1.0\n\n        \n}\n\n\n    \ndef\n \nabout_us\n(\nself\n):\n\n        \npage_attr\n(\nAbout Us\n)\n\n        \nreturn\n\n\n\n\nclass\n \nDocument\n(\nMocha\n):\n\n\n    \ndef\n \nindex\n(\nself\n):\n\n        \npage_attr\n(\nAll documents\n)\n\n        \nreturn\n \n{\n\n            \ndocs\n:\n \n[\n\n                \n{\n\n                    \nid\n:\n \n1\n,\n\n                    \ntitle\n:\n \nThis is a doc title\n\n                \n},\n\n                \n...\n\n            \n]\n\n        \n}\n\n\n    \ndef\n \nget\n(\nself\n,\n \nid\n):\n\n        \npage_attr\n(\nThis is a doc title\n)\n\n        \nreturn\n \n{\n\n            \nid\n:\n \nid\n,\n\n            \ntitle\n:\n \nThis is a doc title\n,\n\n            \ncontent\n:\n \nMy content\n\n        \n}\n\n\n\n\n\n\nThe \nmain.py\n module contains two view classes: Index and Document that inherit \nMocha\n.\nAlso imported \npage_attr\n, a utility function to set the page title and other page attributes\n\n\nThe methods return \ndict\n or \nNone\n\n\nThe route will be created from the class and method name.\n\n\nIf the class name is \nIndex\n, it will be the root of the domain, in this example \n/\n, and other will stay as is,\nin this instance the \nDocument\n will have as route \n/document/\n.\n\n\nThe following url will be created:\n\n\n\n\nIndex:index()\n -\n \nhttp://localhost:5000/\n\n\nIndex:about_us()\n -\n \nhttp://localhost:5000/about-us\n\n\nDocument:index()\n -\n \nhttp://localhost:5000/document\n\n\nDocument:get(id)\n -\n \nhttp://localhost:5000/document/1234\n\n\n\n\n\n\nTemplate\n\n\nAll your templates should be placed in \napplication/templates\n. And must follow the same directory\nstructure relative to the view modules. The returned data from the view will be passed to the template.\n\n\nSo for \napplication/views/main.py\n, it is expecting the following template structure\n\n\n/application\n    |\n    |-- templates\n        |\n        |\n        |-- main/\n            |\n            |-- Index/\n                |\n                |-- index.jade\n                |\n                |-- about_us.jade\n            |\n            |__ Document/\n                |\n                |-- index.jade\n                |\n                |-- get.jade\n\n\n\n\n\nAs you can see, the template structure follows the view structure, where in the view:\n\n\n\n\n\n\nmain.py\n -\n /templates/main\n\n\n\n\n\n\nmain.py:Index()\n -\n templates/main/Index\n\n\n\n\n\n\nmain.py:Index(Mocha):index(self)\n -\n templates/main/Index/index.jade\n\n\n\n\n\n\nmain.py:Index(Mocha):about_us(self)\n -\n templates/main/Index/about_us.jade\n\n\n\n\n\n\nmain.py:Document()\n -\n templates/main/Document\n\n\n\n\n\n\nmain.py:Document(Mocha):index(self)\n -\n templates/main/Document/index.jade\n\n\n\n\n\n\nmain.py:Document(Mocha):get(self)\n -\n templates/main/Document/get.jade\n\n\n\n\n\n\nAlso, you may have noticed that we use \n.jade\n template instead of HTML, just for aesthetic, as it looks like python\non the templates side. But HTML can also be used.\n\n\ntemplates/main/Index/index.jade\n\n\n.row\n\n    \n.col-md-12.text-center\n\n        \nh2\n=\n \nname\n\n            \nsmall\n=\n \nversion\n\n\n\n\n\n\nWhich will be translated into html\n\n\ndiv\n \nclass=\nrow\n\n    \ndiv\n \nclass=\ncol-md-12 text-center\n\n        \nh2\nMocha \nsmall\n1.0\n/small\n/h2\n\n    \n/div\n\n\n/div\n\n\n\n\n\n\ntemplates/main/Document/index.jade\n\n\n.row\n\n    \n.col-md-12\n\n        \nul\n\n        \nfor\n \ndoc\n \nin\n \ndocs\n\n            \nli:\n \na\n(\nhref\n=\nurl_for\n(\nviews.main.Document\n:\nget\n,\n \nid\n=\ndoc.id\n))\n=\n \ndoc.title\n\n\n\n\n\n\nWill be translated into html\n\n\ndiv\n \nclass=\nrow\n\n    \ndiv\n \nclass=\ncol-md-12\n\n        \nul\n\n            \nli\na\n \nhref=\n/document/1\nThis is a doc title\n/a\n/li\n\n        \n/ul\n\n    \n/div\n\n\n/div\n\n\n\n\n\n\n\n\nLayout\n\n\nBy default, layouts are placed in \napplication/templates/layouts\n, and upon rendering Mocha will glue your view in the\nlayout.\n\n\nThe default layout is at: \napplication/templates/layouts/base.jade\n\n\nWhile you can have \nextends\n in your templates, Mocha makes it easy to bypass the repetitive tasks, so you can fully\nfocus on that one page you are working on.\n\n\n-\n \nimport\n \ncontrib/components/html.html\n \nas\n \nhtml\n \nwith\n \ncontext\n\n\n-\n \nimport\n \ncontrib/components/nav.jade\n \nas\n \nnav\n \nwith\n \ncontext\n\n\n-\n \nimport\n \ncontrib/components/forms.html\n \nas\n \nforms\n \nwith\n \ncontext\n\n\n-\n \nimport\n \ncontrib/components/widget.html\n \nas\n \nwidget\n \nwith\n \ncontext\n\n\n\n!!!\n \n5\n\n\nhtml\n(\nlang\n=\nen\n)\n\n    \nhead\n\n        \nmeta\n(\ncharset\n=\nutf-8\n)\n\n        \nmeta\n(\nname\n=\nviewport\n,\n \ncontent\n=\nwidth=device-width, initial-scale=1.0\n)\n\n        \n+\n \nhtml\n.\npage_title\n()\n\n        \n+\n \nhtml\n.\npage_description\n()\n\n        \n+\n \nhtml\n.\nopengraph\n()\n\n        \n+\n \nhtml\n.\nfavicon\n(\nfavicon.ico\n)\n\n        \n+\n \nhtml\n.\ninclude_jquery\n()\n\n        \n+\n \nhtml\n.\ninclude_bootstrap\n()\n\n        \n+\n \nhtml\n.\ninclude_fontawesome\n()\n\n        \n+\n \nhtml\n.\ninclude_bootswatch_theme\n(\nyeti\n)\n\n        \n+\n \nhtml\n.\ninclude_css_file\n(\ncommons.css\n)\n\n        \n+\n \nhtml\n.\ninclude_css_file\n(\nstyles.css\n)\n\n        \n+\n \nhtml\n.\ninclude_js_file\n(\napp.js\n)\n\n        \n+\n \nhtml\n.\ngoogle_analytics\n()\n\n\n    \nbody\n\n\n        \n.\ncontainer\n\n            \n-\n \ninclude\n \n__template__\n\n\n        \nfooter\n\n            \n.\ncontainer\n-\nfluid\n\n                \n.\nrow\n\n                    \n.\ncol\n-\nmd\n-\n12\n\n                        \n.\ntext\n-\ncenter\n.\n\n                            \ncopy\n;\n \n{{\n \ng\n.\n__YEAR__\n}}\n \n{{\n \nconfig\n.\nAPPLICATION_NAME\n \n}}\n \n{{\n \nconfig\n.\nAPPLICATION_VERSION\n \n}}\n\n\n\n\n\n\nThe most important part of the layout is \ninclude __template__\n. This where the view template will be injected.\n\n\nThere are much more stuff going on it the template, we can tackle them later.\n\n\n\n\nStatic\n\n\nStatic hold your assets: js, css, images. They must be placed in \n/application/static/\n\n\nMocha uses \nFlask-Assets\n to manage your assets. Therefor \nassets.yml\n is a bundle collection, that allows you to\nbundle css or js together.\n\n\nassets.yml\n\n\nstyles.css:\n    output: \ngen/styles.css\n\n    contents:\n        - css/style.css\n\napp.js:\n    output: \ngen/app.js\n\n    contents:\n        - js/app.js\n\n\n\n\n\nAnd in your template you can call it\n\n\n+ html.include_css_file(\nstyle.css\n)\n+ html.include_js_file(\napp.js\n)\n\n\n\n\n\nAs a convenience, we include a  \npackage.json\n if you want to download 3rd party scripts (js, css). You can either run\n\nnpm install\n in static directory, or run \nmocha :install-assets\n, which will install your assets in the \nnode_modules\n\n\n\n\nServe\n\n\nNow we are done with our application, all we need to do is serve it.\n\n\nmocha\n \n:\nserve\n\n\n\n\n\n\nThe command above will run \nbrew.py\n\n\nbrew.py\n is the entry point of the application.\n\n\nfrom\n \nmocha\n \nimport\n \nBrew\n\n\n\nprojects\n \n=\n \n{\n\n    \nmain\n:\n \n[\n\n        \nmain\n\n    \n]\n\n\n}\n\n\n\napp\n \n=\n \nBrew\n(\n__name__\n,\n \nprojects\n)\n\n\n\n\n\n\nprojects\n is a dict containing all the views to be used.\n\n\nLet's say if we had the views: \nmain.py\n, \naccount.py\n, \nmusic.py\n, \nbooks.py\n\n\nWe could put them into one\n\n\nprojects = {\n    \nmain\n: [\n        \nmain\n,\n        \naccount\n,\n        \nmusic\n,\n        \nbooks\n\n    ]\n}\n\n\n\n\n\nUpon serving the app, it would make all the endpoints available.\n\n\nLet's say we want to run multiple application\n\n\nprojects = {\n    \nmain\n: [\n        \nmain\n,\n        \naccount\n\n    ],\n    \nlibrary\n: [\n        \nmusic\n,\n        \nbooks\n\n    ]\n}\n\n\n\n\n\nNow we have 2 applications: \nmain\n and \nlibrary\n\n\nBy default, Mocha will default to \nmain\n\n\nmocha\n \n:\nserve\n\n\n\n\n\n\nBut to run \nlibrary\n\n\napp=library mocha :serve\n\n\n\n\n\nIf two apps are running at the same time, you may need to specify a different port\n\n\napp=library mocha :serve --port 5001", 
            "title": "First App"
        }, 
        {
            "location": "/first-app/#your-first-app", 
            "text": "Here's what Mocha will do, and expecting:   that your views are structured in class  the class inherits  mocha.Mocha  if the class name is  Index(Mocha) , it will be the base route as  /  the methods are the views actions  the methods name will become the endpoint url  if the method name is  index(self) , it will be the entry point of that view  methods name with underscore will be dasherized,  about_us(self)  -   /about-us/  the methods return data as dict type  the data returned is passed to your template  the template is named after the method name  the template is magically included in your layout  Mocha brews everything together, and renders the page", 
            "title": "Your first app"
        }, 
        {
            "location": "/first-app/#views", 
            "text": "All your view module should be placed in  application/views . By default ,  main.py  view is created  main.py  must contain at a least one class that inherits  Mocha . A view module may have multiple classes  application/views/main.py  from   mocha   import   Mocha ,   page_attr  class   Index ( Mocha ): \n\n     def   index ( self ): \n         page_attr ( Hello World ) \n         return    { \n             name :   Mocha , \n             version :   1.0 \n         } \n\n     def   about_us ( self ): \n         page_attr ( About Us ) \n         return  class   Document ( Mocha ): \n\n     def   index ( self ): \n         page_attr ( All documents ) \n         return   { \n             docs :   [ \n                 { \n                     id :   1 , \n                     title :   This is a doc title \n                 }, \n                 ... \n             ] \n         } \n\n     def   get ( self ,   id ): \n         page_attr ( This is a doc title ) \n         return   { \n             id :   id , \n             title :   This is a doc title , \n             content :   My content \n         }   The  main.py  module contains two view classes: Index and Document that inherit  Mocha .\nAlso imported  page_attr , a utility function to set the page title and other page attributes  The methods return  dict  or  None  The route will be created from the class and method name.  If the class name is  Index , it will be the root of the domain, in this example  / , and other will stay as is,\nin this instance the  Document  will have as route  /document/ .  The following url will be created:   Index:index()  -   http://localhost:5000/  Index:about_us()  -   http://localhost:5000/about-us  Document:index()  -   http://localhost:5000/document  Document:get(id)  -   http://localhost:5000/document/1234", 
            "title": "Views"
        }, 
        {
            "location": "/first-app/#template", 
            "text": "All your templates should be placed in  application/templates . And must follow the same directory\nstructure relative to the view modules. The returned data from the view will be passed to the template.  So for  application/views/main.py , it is expecting the following template structure  /application\n    |\n    |-- templates\n        |\n        |\n        |-- main/\n            |\n            |-- Index/\n                |\n                |-- index.jade\n                |\n                |-- about_us.jade\n            |\n            |__ Document/\n                |\n                |-- index.jade\n                |\n                |-- get.jade  As you can see, the template structure follows the view structure, where in the view:    main.py  -  /templates/main    main.py:Index()  -  templates/main/Index    main.py:Index(Mocha):index(self)  -  templates/main/Index/index.jade    main.py:Index(Mocha):about_us(self)  -  templates/main/Index/about_us.jade    main.py:Document()  -  templates/main/Document    main.py:Document(Mocha):index(self)  -  templates/main/Document/index.jade    main.py:Document(Mocha):get(self)  -  templates/main/Document/get.jade    Also, you may have noticed that we use  .jade  template instead of HTML, just for aesthetic, as it looks like python\non the templates side. But HTML can also be used.  templates/main/Index/index.jade  .row \n     .col-md-12.text-center \n         h2 =   name \n             small =   version   Which will be translated into html  div   class= row \n     div   class= col-md-12 text-center \n         h2 Mocha  small 1.0 /small /h2 \n     /div  /div   templates/main/Document/index.jade  .row \n     .col-md-12 \n         ul \n         for   doc   in   docs \n             li:   a ( href = url_for ( views.main.Document : get ,   id = doc.id )) =   doc.title   Will be translated into html  div   class= row \n     div   class= col-md-12 \n         ul \n             li a   href= /document/1 This is a doc title /a /li \n         /ul \n     /div  /div", 
            "title": "Template"
        }, 
        {
            "location": "/first-app/#layout", 
            "text": "By default, layouts are placed in  application/templates/layouts , and upon rendering Mocha will glue your view in the\nlayout.  The default layout is at:  application/templates/layouts/base.jade  While you can have  extends  in your templates, Mocha makes it easy to bypass the repetitive tasks, so you can fully\nfocus on that one page you are working on.  -   import   contrib/components/html.html   as   html   with   context  -   import   contrib/components/nav.jade   as   nav   with   context  -   import   contrib/components/forms.html   as   forms   with   context  -   import   contrib/components/widget.html   as   widget   with   context  !!!   5  html ( lang = en ) \n     head \n         meta ( charset = utf-8 ) \n         meta ( name = viewport ,   content = width=device-width, initial-scale=1.0 ) \n         +   html . page_title () \n         +   html . page_description () \n         +   html . opengraph () \n         +   html . favicon ( favicon.ico ) \n         +   html . include_jquery () \n         +   html . include_bootstrap () \n         +   html . include_fontawesome () \n         +   html . include_bootswatch_theme ( yeti ) \n         +   html . include_css_file ( commons.css ) \n         +   html . include_css_file ( styles.css ) \n         +   html . include_js_file ( app.js ) \n         +   html . google_analytics () \n\n     body \n\n         . container \n             -   include   __template__ \n\n         footer \n             . container - fluid \n                 . row \n                     . col - md - 12 \n                         . text - center . \n                             copy ;   {{   g . __YEAR__ }}   {{   config . APPLICATION_NAME   }}   {{   config . APPLICATION_VERSION   }}   The most important part of the layout is  include __template__ . This where the view template will be injected.  There are much more stuff going on it the template, we can tackle them later.", 
            "title": "Layout"
        }, 
        {
            "location": "/first-app/#static", 
            "text": "Static hold your assets: js, css, images. They must be placed in  /application/static/  Mocha uses  Flask-Assets  to manage your assets. Therefor  assets.yml  is a bundle collection, that allows you to\nbundle css or js together.  assets.yml  styles.css:\n    output:  gen/styles.css \n    contents:\n        - css/style.css\n\napp.js:\n    output:  gen/app.js \n    contents:\n        - js/app.js  And in your template you can call it  + html.include_css_file( style.css )\n+ html.include_js_file( app.js )  As a convenience, we include a   package.json  if you want to download 3rd party scripts (js, css). You can either run npm install  in static directory, or run  mocha :install-assets , which will install your assets in the  node_modules", 
            "title": "Static"
        }, 
        {
            "location": "/first-app/#serve", 
            "text": "Now we are done with our application, all we need to do is serve it.  mocha   : serve   The command above will run  brew.py  brew.py  is the entry point of the application.  from   mocha   import   Brew  projects   =   { \n     main :   [ \n         main \n     ]  }  app   =   Brew ( __name__ ,   projects )   projects  is a dict containing all the views to be used.  Let's say if we had the views:  main.py ,  account.py ,  music.py ,  books.py  We could put them into one  projects = {\n     main : [\n         main ,\n         account ,\n         music ,\n         books \n    ]\n}  Upon serving the app, it would make all the endpoints available.  Let's say we want to run multiple application  projects = {\n     main : [\n         main ,\n         account \n    ],\n     library : [\n         music ,\n         books \n    ]\n}  Now we have 2 applications:  main  and  library  By default, Mocha will default to  main  mocha   : serve   But to run  library  app=library mocha :serve  If two apps are running at the same time, you may need to specify a different port  app=library mocha :serve --port 5001", 
            "title": "Serve"
        }, 
        {
            "location": "/config/", 
            "text": "Location: \n/application/config.py\n.\n\n\n\n\nMocha uses class-based configuration, and the config will be loaded upon startup.\n\n\nclass\n \nBaseConfig\n(\nobject\n)\n:\n\n    \n\n\n    Base Configuration.\n\n\n    \n\n\n    \nAPPLICATION_NAME\n \n=\n \nMocha\n\n\n    \nAPPLICATION_URL\n \n=\n \n\n\n    \nAPPLICATION_VERSION\n \n=\n \n0.0.1\n\n\n    \nGOOGLE_ANALYTICS_ID\n \n=\n \n\n\n    \nADMIN_EMAIL\n \n=\n \nNone\n\n\n    \nCONTACT_EMAIL\n \n=\n \nNone\n\n\n    \nPAGINATION_PER_PAGE\n \n=\n \n20\n\n\n    \n...\n\n\n\n\nclass\n \nDev\n(\nBaseConfig\n)\n:\n\n    \n\n\n    Config for development environment\n\n\n    \n\n    \nSERVER_NAME\n \n=\n \nNone\n\n    \nDEBUG\n \n=\n \nTrue\n\n    \nSECRET_KEY\n \n=\n \nPLEASE CHANGE ME\n\n\n\n\nclass\n \nProd\n(\nBaseConfig\n)\n:\n\n    \n\n\n    Config for Production environment\n\n\n    \n\n    \nSERVER_NAME\n \n=\n \nabc.com\n\n    \nDEBUG\n \n=\n \nFalse\n\n    \nSECRET_KEY\n \n=\n \nMy Prod Secret\n\n    \nCOMPRESS_HTML\n \n=\n \nTrue\n\n\n\n\n\n\nIt is recommended to have a base class, \nBaseConfig\n, and your environment classes \nDev\n, \nProd\n which are subclasses\nof the \nBaseConfig\n, this way they can share some common config.\n\n\nThe environment classes will be loaded on Mocha startup. By default, and in development, Mocha will attempt to load\n the \nDev\n if one isn't provided.\n\n\nTo switch to a different config, you have to set the environment variable\n\n\nenv=prod mocha :serve\n\n\n\n\n\nor to set the application along with the environment\n\n\napp=main:prod mocha :serve\n\n\n\n\n\nThe code above will load the \nProd\n config.\n\n\nOne main advantage of having your config like that, is that you have the ability of using different config for different\nenvironment, could be for testing, prod, dev, etc.", 
            "title": "Config"
        }, 
        {
            "location": "/views/", 
            "text": "Location: \n/application/views\n\n\n\n\nExamples\n\n\nfrom\n \nmocha\n \nimport\n \nMocha\n\n\n\nclass\n \nIndex\n(\nMocha\n):\n\n    \ndef\n \nindex\n(\nself\n):\n\n        \nreturn", 
            "title": "Views"
        }, 
        {
            "location": "/views/route/", 
            "text": "Allows you to apply a route on a view class or a single method\n\n\n\n\nImport\n\n\nfrom\n \nmocha\n \nimport\n \nrequest\n\n\n\n\n\n\n\n\nClass based\n\n\nWhen applied to a view class, all methods will be prefixed with the toute\n\n\nThe following code will use the \n/account/\n route, and \n/account/hello\n\n\n@request\n.\nroute\n(\n/account/\n)\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n\n    \ndef\n \nindex\n(\nself\n)\n:\n\n        \npass\n\n\n    \ndef\n \nhello\n(\nself\n)\n:\n\n        \npass\n\n\n\n\n\n\n\n\nMethod based\n\n\nMethod based route only applies the route to the method.\n\n\nThe code below will expose \n/hello-world\n. By default \nIndex\n and \nindex\n will\nreference to the root, unless a route is applied\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n\n    \ndef\n \nindex\n(\nself\n)\n:\n\n        \npass\n\n\n    \n@request\n.\nroute\n(\nhello-world\n)\n\n    \ndef\n \nhello\n(\nself\n)\n:\n\n        \npass\n\n\n\n\n\n\n\n\nClass and Method\n\n\nYou can combine both class and method based.\n\n\nThe code below will now be accessed at: \n/account/\n, \n/account/hello-world\n\n\n@request\n.\nroute\n(\n/account/\n)\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n\n    \ndef\n \nindex\n(\nself\n)\n:\n\n        \npass\n\n\n    \n@request\n.\nroute\n(\n/hello-world\n)\n\n    \ndef\n \nhello\n(\nself\n)\n:\n\n        \npass", 
            "title": "Route"
        }, 
        {
            "location": "/views/route/#import", 
            "text": "from   mocha   import   request", 
            "title": "Import"
        }, 
        {
            "location": "/views/route/#class-based", 
            "text": "When applied to a view class, all methods will be prefixed with the toute  The following code will use the  /account/  route, and  /account/hello  @request . route ( /account/ )  class   Index ( Mocha ) : \n\n     def   index ( self ) : \n         pass \n\n     def   hello ( self ) : \n         pass", 
            "title": "Class based"
        }, 
        {
            "location": "/views/route/#method-based", 
            "text": "Method based route only applies the route to the method.  The code below will expose  /hello-world . By default  Index  and  index  will\nreference to the root, unless a route is applied  class   Index ( Mocha ) : \n\n     def   index ( self ) : \n         pass \n\n     @request . route ( hello-world ) \n     def   hello ( self ) : \n         pass", 
            "title": "Method based"
        }, 
        {
            "location": "/views/route/#class-and-method", 
            "text": "You can combine both class and method based.  The code below will now be accessed at:  /account/ ,  /account/hello-world  @request . route ( /account/ )  class   Index ( Mocha ) : \n\n     def   index ( self ) : \n         pass \n\n     @request . route ( /hello-world ) \n     def   hello ( self ) : \n         pass", 
            "title": "Class and Method"
        }, 
        {
            "location": "/views/request/", 
            "text": "request\n is a proxy to \nflask.request\n object, with some additional decorators and attributes\n\n\n\n\nImport\n\n\nfrom\n \nmocha\n \nimport\n \nrequest\n\n\n\n\n\n\n\n\nMethods\n\n\nget\n\n\n@request.get\n set a view to accept only GET method\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n\n    \n@request\n.\nget\n\n    \ndef\n \nindex\n(\nself\n)\n:\n\n        \n#\n \ndo\n \nsomething\n\n\n\n\n\n\n\n\npost\n\n\n@request.post\n set  a view to accept only POST method\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n\n    \n@request\n.\npost\n\n    \ndef\n \nindex\n(\nself\n)\n:\n\n        \n#\n \ndo\n \nsomething\n\n\n\n\n\n\n\n\nput\n\n\n@request.put\n set  a view to accept only PUT method\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n\n    \n@request\n.\nput\n\n    \ndef\n \nindex\n(\nself\n)\n:\n\n        \n#\n \ndo\n \nsomething\n\n\n\n\n\n\n\n\ndelete\n\n\n@request.delete\n set  a view to accept only DELETE method\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n\n    \n@request\n.\ndelete\n\n    \ndef\n \nindex\n(\nself\n)\n:\n\n        \n#\n \ndo\n \nsomething\n\n\n\n\n\n\n\n\nall\n\n\n@request.all\n set a view to accept only ALL methods.\n\n\nIt will accept: GET, POST, PUT, DELETE, OPTIONS\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n\n    \n@request\n.\nall\n\n    \ndef\n \nindex\n(\nself\n)\n:\n\n        \n#\n \ndo\n \nsomething\n\n\n\n\n\n\nCombine\n\n\nAn alternative to @all is to use all methods as\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n\n    \n@request\n.\nget\n\n    \n@request\n.\npost\n\n    \n@request\n.\nput\n\n    \n@request\n.\ndelete\n\n    \n@request\n.\noptions\n\n    \ndef\n \nindex\n(\nself\n)\n:\n\n        \n#\n \ndo\n \nsomething\n\n\n\n\n\n\n\n\nTest Method\n\n\nUsually if a view method accept more than one request method, it is best to test for the method\n\n\nIS_GET\n\n\nrequest.IS_GET\n tests if the request method is GET\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n\n    \ndef\n \nindex\n(\nself\n)\n:\n\n        \nif\n \nrequest\n.\nIS_GET\n:\n\n            \n#\n \ndo\n \nsomething\n\n\n\n\n\n\nIt is equivalent to \nrequest.method == 'GET'\n\n\n\n\nIS_POST\n\n\nrequest.IS_GET\n tests if the request method is POST\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n\n    \ndef\n \nindex\n(\nself\n)\n:\n\n        \nif\n \nrequest\n.\nIS_POST\n:\n\n            \n#\n \ndo\n \nsomething\n\n\n\n\n\n\nIt is equivalent to \nrequest.method == 'POST'\n\n\n\n\nSame as above for PUT and DELETE\n\n\nIS_PUT\n\n\nIS_DELETE\n\n\n\n\nArgs \n Forms\n\n\nThis is already part of Flask. It is added as a reference\n\n\nargs\n\n\nrequest.args.get\n lets you get the query vars\n\n\n#\n \nhttp\n:\n//127.0.0.1/?name=Mocha\n\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n\n    \ndef\n \nindex\n(\nself\n)\n:\n\n        \nname\n \n=\n \nrequest\n.\nargs\n.\nget\n(\nname\n)\n\n\n\n\n\n\nform\n\n\nrequest.form.get\n lets you get the data that was sent in a post form\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n\n    \ndef\n \nindex\n(\nself\n)\n:\n\n        \nname\n \n=\n \nrequest\n.\nform\n.\nget\n(\nname\n)\n\n\n\n\n\n\ngetlist\n\n\nrequest.form.getlist\n returns a list of all the items with the same name that was posted in a form\n\n\ninput\n \ntype\n=\ncheckbox\n \nname\n=\noptions\n \nvalue\n=\napple\n\n\ninput\n \ntype\n=\ncheckbox\n \nname\n=\noptions\n \nvalue\n=\norange\n\n\ninput\n \ntype\n=\ncheckbox\n \nname\n=\noptions\n \nvalue\n=\ngrapes\n\n\n\n\n\n\nPython\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n\n    \ndef\n \nindex\n(\nself\n)\n:\n\n        \nmy_options\n \n=\n \nrequest\n.\nform\n.\ngetlist\n(\noptions\n)\n\n\n\n\n\n\nfiles.get\n\n\nrequest.files.get\n allow you to retrieve a file that was uploaded\n\n\nHTML\n\n\ninput\n \ntype\n=\nfile\n \nname\n=\nfile\n\n\n\n\n\n\nPython\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n\n    \ndef\n \nindex\n(\nself\n)\n:\n\n        \nfile\n \n=\n \nrequest\n.\nfiles\n.\nget\n(\nfile\n)\n\n\n\n\n\n\nfiles.getlist\n\n\nrequest.files.getlist\n allow you to retrieve multiple files uploaded with the same name\n\n\nHTML\n\n\ninput\n \ntype\n=\nfile\n \nname\n=\nfile\n\n\ninput\n \ntype\n=\nfile\n \nname\n=\nfile\n\n\ninput\n \ntype\n=\nfile\n \nname\n=\nfile\n\n\n\n\n\n\nPython\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n\n    \ndef\n \nindex\n(\nself\n)\n:\n\n        \nfiles\n \n=\n \nrequest\n.\nfiles\n.\ngetlist\n(\nfile\n)\n\n\n\n\n\n\nSave uploaded file\n\n\nHere's a snippet on how to upload a file.\n\n\nfrom\n \nmocha\n \nimport\n \nrequest\n,\n \nupload_file\n\n\n\nclass\n \nIndex\n(\nMocha\n):\n\n\n    \n@request.post\n\n    \ndef\n \nupload_file\n(\nself\n):\n\n        \nimage_file\n \n=\n \nrequest\n.\nfiles\n.\nget\n(\nfile\n)\n\n        \nupload_file\n(\nimage\n,\n \nfile\n)", 
            "title": "Request"
        }, 
        {
            "location": "/views/request/#import", 
            "text": "from   mocha   import   request", 
            "title": "Import"
        }, 
        {
            "location": "/views/request/#methods", 
            "text": "", 
            "title": "Methods"
        }, 
        {
            "location": "/views/request/#get", 
            "text": "@request.get  set a view to accept only GET method  class   Index ( Mocha ) : \n\n     @request . get \n     def   index ( self ) : \n         #   do   something", 
            "title": "get"
        }, 
        {
            "location": "/views/request/#post", 
            "text": "@request.post  set  a view to accept only POST method  class   Index ( Mocha ) : \n\n     @request . post \n     def   index ( self ) : \n         #   do   something", 
            "title": "post"
        }, 
        {
            "location": "/views/request/#put", 
            "text": "@request.put  set  a view to accept only PUT method  class   Index ( Mocha ) : \n\n     @request . put \n     def   index ( self ) : \n         #   do   something", 
            "title": "put"
        }, 
        {
            "location": "/views/request/#delete", 
            "text": "@request.delete  set  a view to accept only DELETE method  class   Index ( Mocha ) : \n\n     @request . delete \n     def   index ( self ) : \n         #   do   something", 
            "title": "delete"
        }, 
        {
            "location": "/views/request/#all", 
            "text": "@request.all  set a view to accept only ALL methods.  It will accept: GET, POST, PUT, DELETE, OPTIONS  class   Index ( Mocha ) : \n\n     @request . all \n     def   index ( self ) : \n         #   do   something", 
            "title": "all"
        }, 
        {
            "location": "/views/request/#combine", 
            "text": "An alternative to @all is to use all methods as  class   Index ( Mocha ) : \n\n     @request . get \n     @request . post \n     @request . put \n     @request . delete \n     @request . options \n     def   index ( self ) : \n         #   do   something", 
            "title": "Combine"
        }, 
        {
            "location": "/views/request/#test-method", 
            "text": "Usually if a view method accept more than one request method, it is best to test for the method", 
            "title": "Test Method"
        }, 
        {
            "location": "/views/request/#is_get", 
            "text": "request.IS_GET  tests if the request method is GET  class   Index ( Mocha ) : \n\n     def   index ( self ) : \n         if   request . IS_GET : \n             #   do   something   It is equivalent to  request.method == 'GET'", 
            "title": "IS_GET"
        }, 
        {
            "location": "/views/request/#is_post", 
            "text": "request.IS_GET  tests if the request method is POST  class   Index ( Mocha ) : \n\n     def   index ( self ) : \n         if   request . IS_POST : \n             #   do   something   It is equivalent to  request.method == 'POST'   Same as above for PUT and DELETE", 
            "title": "IS_POST"
        }, 
        {
            "location": "/views/request/#is_put", 
            "text": "", 
            "title": "IS_PUT"
        }, 
        {
            "location": "/views/request/#is_delete", 
            "text": "", 
            "title": "IS_DELETE"
        }, 
        {
            "location": "/views/request/#args-forms", 
            "text": "This is already part of Flask. It is added as a reference", 
            "title": "Args &amp; Forms"
        }, 
        {
            "location": "/views/request/#args", 
            "text": "request.args.get  lets you get the query vars  #   http : //127.0.0.1/?name=Mocha  class   Index ( Mocha ) : \n\n     def   index ( self ) : \n         name   =   request . args . get ( name )", 
            "title": "args"
        }, 
        {
            "location": "/views/request/#form", 
            "text": "request.form.get  lets you get the data that was sent in a post form  class   Index ( Mocha ) : \n\n     def   index ( self ) : \n         name   =   request . form . get ( name )", 
            "title": "form"
        }, 
        {
            "location": "/views/request/#getlist", 
            "text": "request.form.getlist  returns a list of all the items with the same name that was posted in a form  input   type = checkbox   name = options   value = apple  input   type = checkbox   name = options   value = orange  input   type = checkbox   name = options   value = grapes   Python  class   Index ( Mocha ) : \n\n     def   index ( self ) : \n         my_options   =   request . form . getlist ( options )", 
            "title": "getlist"
        }, 
        {
            "location": "/views/request/#filesget", 
            "text": "request.files.get  allow you to retrieve a file that was uploaded  HTML  input   type = file   name = file   Python  class   Index ( Mocha ) : \n\n     def   index ( self ) : \n         file   =   request . files . get ( file )", 
            "title": "files.get"
        }, 
        {
            "location": "/views/request/#filesgetlist", 
            "text": "request.files.getlist  allow you to retrieve multiple files uploaded with the same name  HTML  input   type = file   name = file  input   type = file   name = file  input   type = file   name = file   Python  class   Index ( Mocha ) : \n\n     def   index ( self ) : \n         files   =   request . files . getlist ( file )", 
            "title": "files.getlist"
        }, 
        {
            "location": "/views/request/#save-uploaded-file", 
            "text": "Here's a snippet on how to upload a file.  from   mocha   import   request ,   upload_file  class   Index ( Mocha ): \n\n     @request.post \n     def   upload_file ( self ): \n         image_file   =   request . files . get ( file ) \n         upload_file ( image ,   file )", 
            "title": "Save uploaded file"
        }, 
        {
            "location": "/views/redirect/", 
            "text": "As it is in Flask, \nredirect\n just redirects to another endpoint or url. However, Mocha put a little bit of\nconvenience in, by doing self reference or\n\n\nImport\n\n\nfrom\n \nmocha\n \nimport\n \nredirect\n\n\n\n\n\n\nUsage\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n\n    \ndef\n \nindex\n(\nself\n)\n:\n\n        \npass\n\n\n    \ndef\n \npost\n(\nself\n)\n:\n\n        \nreturn\n \nredirect\n(\nself\n.\nindex\n)\n\n\n\n\n\n\nWith other views\n\n\nIf you will be redirecting in views that are not in the same module, yo will need to import the \nviews\n object along\nwith redirect\n\n\nfrom\n \nmocha\n \nimport\n \nredirect\n,\n \nviews\n\n\n\n\n\n\nUsage\n\n\n# views/main.py\n\n\n\nfrom\n \nmocha\n \nimport\n \nredirect\n,\n \nviews\n,\n \nrequest\n\n\n\nclass\n \nIndex\n(\nMocha\n):\n\n\n    \n@request.post\n\n    \ndef\n \nsave_data\n():\n\n        \nreturn\n \nredirect\n(\nviews\n.\naccount\n.\nIndex\n.\ninfo\n)\n\n\n\n\n\n\n-\n\n\n#\n \nviews\n/\naccount\n.\npy\n\n\n\n@request\n.\nroute\n(\n/account\n)\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n\n    \ndef\n \nindex\n(\nself\n)\n:\n\n        \npass\n\n\n    \ndef\n \ninfo\n(\nself\n)\n:\n\n        \npass", 
            "title": "Redirect"
        }, 
        {
            "location": "/views/redirect/#import", 
            "text": "from   mocha   import   redirect", 
            "title": "Import"
        }, 
        {
            "location": "/views/redirect/#usage", 
            "text": "class   Index ( Mocha ) : \n\n     def   index ( self ) : \n         pass \n\n     def   post ( self ) : \n         return   redirect ( self . index )", 
            "title": "Usage"
        }, 
        {
            "location": "/views/redirect/#with-other-views", 
            "text": "If you will be redirecting in views that are not in the same module, yo will need to import the  views  object along\nwith redirect  from   mocha   import   redirect ,   views", 
            "title": "With other views"
        }, 
        {
            "location": "/views/redirect/#usage_1", 
            "text": "# views/main.py  from   mocha   import   redirect ,   views ,   request  class   Index ( Mocha ): \n\n     @request.post \n     def   save_data (): \n         return   redirect ( views . account . Index . info )   -  #   views / account . py  @request . route ( /account )  class   Index ( Mocha ) : \n\n     def   index ( self ) : \n         pass \n\n     def   info ( self ) : \n         pass", 
            "title": "Usage"
        }, 
        {
            "location": "/views/render/", 
            "text": "This module contains decorators that will alter the rendering of the view. It can change the response, or add\nnew elements on the page, ie: \njson\n will turn the endpoint into a json response, while \ntemplate\n will change the\ndefault template page to display, and \nnav\n will create a menu title.\n\n\n\n\nImport\n\n\nfrom\n \nmocha\n \nimport\n \nrender\n\n\n\n\n\n\n\n\nResponse\n\n\nBy default, the responses will render normal HTML. But if you want to return\nJSON, or XML data, the methods below will conveniently help you do that.\n\n\nN.B.: The methods must return DICT for them to benefit from multiple response format\n\n\njson\n\n\nIt return a dict into JSON. Good for API endpoint.\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n\n    \n@render\n.\njson\n\n    \ndef\n \nmy_data\n(\nself\n)\n:\n\n        \nreturn\n \n{\n\n            \nname\n:\n \nMocha\n,\n\n            \nversion\n:\n \nxxx\n\n        \n}\n\n\n\n\n\n\njsonp\n\n\nIt return a dict into JSON for JSONP.\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n\n    \n@render\n.\njsonp\n\n    \ndef\n \nmy_data\n(\nself\n)\n:\n\n        \nreturn\n \n{\n\n            \nname\n:\n \nMocha\n,\n\n            \nversion\n:\n \nxxx\n\n        \n}\n\n\n\n\n\n\nxml\n\n\nIt return a dict into XML.\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n\n    \n@render\n.\nxml\n\n    \ndef\n \nmy_data\n(\nself\n)\n:\n\n        \nreturn\n \n{\n\n            \nname\n:\n \nMocha\n,\n\n            \nversion\n:\n \nxxx\n\n        \n}\n\n\n\n\n\n\nhtml\n\n\nThere is no decorator for HTML, as it will fall back to it if a view is not decorated\nwith \njson\n or \nxml\n\n\nTemplate\n\n\nThis decorator allows you to change the view template or layout\n\n\nIt can be applied on both class based or method based\n\n\nParams:\n\n\ntemplate(page, markup=\"jade\")\n\n\n\n\npage: the path of the new layout or template\n\n\nmarkup: the markup to use for all pages: \njade\n or \nhtml\n\n\n\n\nClass based\n\n\nThis will change the default layout to another one.\n\n\n@render\n.\ntemplate\n(\n/layouts/my-new-layouts.jade\n)\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n\n    \ndef\n \nindex\n(\nself\n)\n:\n\n        \nreturn\n\n\n    \ndef\n \nhello\n(\nself\n)\n:\n\n        \nreturn\n\n\n\n\n\n\nMethod based\n\n\nBy default the template for method is based on its name, to use a different\ntemplate, specify the full path\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n\n\n    \ndef\n \nindex\n(\nself\n)\n:\n\n        \nreturn\n\n\n    \n@render\n.\ntemplate\n(\n/my-path/new-world.html\n,\n \nmarkup\n=\nhtml\n)\n\n    \ndef\n \nhello\n(\nself\n)\n:\n\n        \nreturn\n\n\n\n\n\n\nNavigation", 
            "title": "Render"
        }, 
        {
            "location": "/views/render/#import", 
            "text": "from   mocha   import   render", 
            "title": "Import"
        }, 
        {
            "location": "/views/render/#response", 
            "text": "By default, the responses will render normal HTML. But if you want to return\nJSON, or XML data, the methods below will conveniently help you do that.  N.B.: The methods must return DICT for them to benefit from multiple response format", 
            "title": "Response"
        }, 
        {
            "location": "/views/render/#json", 
            "text": "It return a dict into JSON. Good for API endpoint.  class   Index ( Mocha ) : \n\n     @render . json \n     def   my_data ( self ) : \n         return   { \n             name :   Mocha , \n             version :   xxx \n         }", 
            "title": "json"
        }, 
        {
            "location": "/views/render/#jsonp", 
            "text": "It return a dict into JSON for JSONP.  class   Index ( Mocha ) : \n\n     @render . jsonp \n     def   my_data ( self ) : \n         return   { \n             name :   Mocha , \n             version :   xxx \n         }", 
            "title": "jsonp"
        }, 
        {
            "location": "/views/render/#xml", 
            "text": "It return a dict into XML.  class   Index ( Mocha ) : \n\n     @render . xml \n     def   my_data ( self ) : \n         return   { \n             name :   Mocha , \n             version :   xxx \n         }", 
            "title": "xml"
        }, 
        {
            "location": "/views/render/#html", 
            "text": "There is no decorator for HTML, as it will fall back to it if a view is not decorated\nwith  json  or  xml", 
            "title": "html"
        }, 
        {
            "location": "/views/render/#template", 
            "text": "This decorator allows you to change the view template or layout  It can be applied on both class based or method based  Params:  template(page, markup=\"jade\")   page: the path of the new layout or template  markup: the markup to use for all pages:  jade  or  html", 
            "title": "Template"
        }, 
        {
            "location": "/views/render/#class-based", 
            "text": "This will change the default layout to another one.  @render . template ( /layouts/my-new-layouts.jade )  class   Index ( Mocha ) : \n\n     def   index ( self ) : \n         return \n\n     def   hello ( self ) : \n         return", 
            "title": "Class based"
        }, 
        {
            "location": "/views/render/#method-based", 
            "text": "By default the template for method is based on its name, to use a different\ntemplate, specify the full path  class   Index ( Mocha ) : \n\n\n     def   index ( self ) : \n         return \n\n     @render . template ( /my-path/new-world.html ,   markup = html ) \n     def   hello ( self ) : \n         return", 
            "title": "Method based"
        }, 
        {
            "location": "/views/render/#navigation", 
            "text": "", 
            "title": "Navigation"
        }, 
        {
            "location": "/views/url_for/", 
            "text": "url_for\n use a view endpoint to create a full url\n\n\nMocha adds a little flavor in it, to reference other views by their reference.\n\n\nImport\n\n\nfrom\n \nmocha\n \nimport\n \nurl_for\n\n\n\n\n\n\nUsage\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n    \ndef\n \nindex\n(\nself\n)\n:\n\n        \ndoc_1_url\n \n=\n \nurl_for\n(\nself\n.\ndoc\n,\n \nid\n=\n1\n)\n\n        \nfull_url_account_info\n \n=\n \nurl_for\n(\nviews\n.\naccount\n.\nIndex\n.\ninfo\n,\n \n_external\n=\nTrue\n)\n\n\n        \nreturn\n \n{\n\n            \nurls\n:\n \n{\n\n                \ndoc_1\n:\n \ndoc_1_url\n,\n\n                \nfull_url\n:\n \nfull_url_account_info\n\n            \n}\n\n        \n}\n\n\n\n    \ndef\n \ndoc\n(\nself\n,\n \nid\n)\n:\n\n        \npass", 
            "title": "Url_For"
        }, 
        {
            "location": "/views/url_for/#import", 
            "text": "from   mocha   import   url_for", 
            "title": "Import"
        }, 
        {
            "location": "/views/url_for/#usage", 
            "text": "class   Index ( Mocha ) : \n     def   index ( self ) : \n         doc_1_url   =   url_for ( self . doc ,   id = 1 ) \n         full_url_account_info   =   url_for ( views . account . Index . info ,   _external = True ) \n\n         return   { \n             urls :   { \n                 doc_1 :   doc_1_url , \n                 full_url :   full_url_account_info \n             } \n         } \n\n\n     def   doc ( self ,   id ) : \n         pass", 
            "title": "Usage"
        }, 
        {
            "location": "/views/abort/", 
            "text": "", 
            "title": "Abort"
        }, 
        {
            "location": "/views/session-flash/", 
            "text": "Session\n\n\nMocha natively uses Flask session, with the addition of having the ability to use as backend either: Redis, Memcache, S3, CloudStorage\n\n\nConfig\n\n\n#: SESSION\n#: Flask-KVSession is used to save the user\ns session\n#: Set the SESSION_URL by using these examples below to set KVSession\n#: To use local session, just set SESSION_URL to None\n#:\n#: Redis: redis://username:password@host:6379/db\n#: S3: s3://username:password@s3.aws.amazon.com/bucket\n#: Google Storage: google_storage://username:password@cloud.google.com/bucket\n#: SQL: postgresql://username:password@host:3306/db\n#:      mysql+pysql://username:password@host:3306/db\n#:      sqlite://\n#: Memcached: memcache://host:port\n#:\nSESSION_URL = None\n\n\n\n\n\nUsage\n\n\nfrom\n \nmocha\n \nimport\n \nsession\n\n\n\n\n\n\n\n\nFlash\n\n\nThe Flash provides single-use string storage. It useful for implementing the Post/Redirect/Get pattern, or for transient\n\"Operation Successful!\" or \"Operation Failed!\" messages\n\n\nYou can import the \nflash\n as is, but for convenience, we provided some special message pattern:\n\n\nflash_info\n, \nflash_success\n, \nflash_error\n to indicate a info, success and error message respectively.\n\n\nFlash Message\n\n\nImport\n\n\nfrom\n \nmocha\n \nimport\n \nflash_info\n,\n \nflash_success\n,\n \nflash_error\n\n\n\n\n\n\nUsage\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n\n    \ndef\n \nindex\n(\nself\n)\n:\n\n        \nflash_info\n(\nYou need to provide your account info\n)\n\n        \nreturn\n\n\n    \ndef\n \npost\n(\nself\n)\n:\n\n        \ntry\n:\n\n            \n#\n \ndo\n \nsomething\n\n            \nflash_success\n(\nAccount info saved successfully!\n)\n\n        \nexcept\n \nException\n \nas\n \nex\n:\n            \nflash_error\n(\nAn error occured while saving your info\n)\n\n\n        \nreturn\n \nredirect\n(\nself\n.\nindex\n)\n\n\n\n\n\n\n\n\nFlash Data\n\n\nSame as flash message, you can also flash data\n\n\nImport\n\n\nfrom\n \nmocha\n \nimport\n \nflash_data\n,\n \nget_flash_data\n\n\n\n\n\n\nUsage\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n\n    \ndef\n \nindex\n(\nself\n)\n:\n\n        \nflash_data\n({\ntemp\n:\n \n70\n})\n\n\n\n    \ndef\n \nget\n(\nself\n,\n \nid\n)\n:\n\n        \ntemp\n \n=\n \nget_flash_data\n().\nget\n(\ntemp\n)", 
            "title": "Session & Flash"
        }, 
        {
            "location": "/views/session-flash/#session", 
            "text": "Mocha natively uses Flask session, with the addition of having the ability to use as backend either: Redis, Memcache, S3, CloudStorage", 
            "title": "Session"
        }, 
        {
            "location": "/views/session-flash/#config", 
            "text": "#: SESSION\n#: Flask-KVSession is used to save the user s session\n#: Set the SESSION_URL by using these examples below to set KVSession\n#: To use local session, just set SESSION_URL to None\n#:\n#: Redis: redis://username:password@host:6379/db\n#: S3: s3://username:password@s3.aws.amazon.com/bucket\n#: Google Storage: google_storage://username:password@cloud.google.com/bucket\n#: SQL: postgresql://username:password@host:3306/db\n#:      mysql+pysql://username:password@host:3306/db\n#:      sqlite://\n#: Memcached: memcache://host:port\n#:\nSESSION_URL = None", 
            "title": "Config"
        }, 
        {
            "location": "/views/session-flash/#usage", 
            "text": "from   mocha   import   session", 
            "title": "Usage"
        }, 
        {
            "location": "/views/session-flash/#flash", 
            "text": "The Flash provides single-use string storage. It useful for implementing the Post/Redirect/Get pattern, or for transient\n\"Operation Successful!\" or \"Operation Failed!\" messages  You can import the  flash  as is, but for convenience, we provided some special message pattern:  flash_info ,  flash_success ,  flash_error  to indicate a info, success and error message respectively.", 
            "title": "Flash"
        }, 
        {
            "location": "/views/session-flash/#flash-message", 
            "text": "", 
            "title": "Flash Message"
        }, 
        {
            "location": "/views/session-flash/#import", 
            "text": "from   mocha   import   flash_info ,   flash_success ,   flash_error", 
            "title": "Import"
        }, 
        {
            "location": "/views/session-flash/#usage_1", 
            "text": "class   Index ( Mocha ) : \n\n     def   index ( self ) : \n         flash_info ( You need to provide your account info ) \n         return \n\n     def   post ( self ) : \n         try : \n             #   do   something \n             flash_success ( Account info saved successfully! ) \n         except   Exception   as   ex :\n             flash_error ( An error occured while saving your info ) \n\n         return   redirect ( self . index )", 
            "title": "Usage"
        }, 
        {
            "location": "/views/session-flash/#flash-data", 
            "text": "Same as flash message, you can also flash data", 
            "title": "Flash Data"
        }, 
        {
            "location": "/views/session-flash/#import_1", 
            "text": "from   mocha   import   flash_data ,   get_flash_data", 
            "title": "Import"
        }, 
        {
            "location": "/views/session-flash/#usage_2", 
            "text": "class   Index ( Mocha ) : \n\n     def   index ( self ) : \n         flash_data ({ temp :   70 }) \n\n\n     def   get ( self ,   id ) : \n         temp   =   get_flash_data (). get ( temp )", 
            "title": "Usage"
        }, 
        {
            "location": "/views/decorators/", 
            "text": "Decorators\n\n\nMocha exposes decorators to simplify your app development\n\n\n\n\nRender\n\n\n\n\n\n\nCache\n\n\nFlask-Caching is used for caching\n\n\ncache\n\n\nfrom\n \nmocha.ext\n \nimport\n \ncache\n\n\nclass\n \nIndex\n(\nMocha\n):\n\n\n    \n@cache.cached\n(\n500\n)\n\n    \ndef\n \nmy_cache_view\n(\nself\n):\n\n        \nreturn\n\n\n\n\n\n\nmemoize\n\n\n\n\nCSRF\n\n\nAll POST methods are required to receive \n_csrf_token\n from the application.\n\n\nIt it fails, the user will not be able to use it.\n\n\nexempt_csrf\n\n\nIn some cases you will want to bypass a POST method CSRF check, to do, we\nhave to exempt that method\n\n\nfrom\n \nmocha.ext\n \nimport\n \ncsrf\n\n\nimport\n \nmocha.decorators\n \nas\n \ndeco\n\n\n\nclass\n \nIndex\n(\nMocha\n):\n\n\n    \n@csrf.exempt\n\n    \n@deco.accept_post\n\n    \ndef\n \nmy_exempted_csrf_post\n(\nself\n):\n\n        \nreturn\n\n\n\n\n\n\n\n\nnav_menu\n\n\n@nav_menu\n creates a \nnavigation menu\n for UI\n\n\nfrom\n \nmocha\n \nimport\n \nnav_menu\n\n\n\n\n\n\nview_parser\n\n\n@view_parser\n\n\nfrom\n \nmocha\n \nimport\n \nview_parser", 
            "title": "Decorators"
        }, 
        {
            "location": "/views/decorators/#decorators", 
            "text": "Mocha exposes decorators to simplify your app development", 
            "title": "Decorators"
        }, 
        {
            "location": "/views/decorators/#render", 
            "text": "", 
            "title": "Render"
        }, 
        {
            "location": "/views/decorators/#cache", 
            "text": "Flask-Caching is used for caching", 
            "title": "Cache"
        }, 
        {
            "location": "/views/decorators/#cache_1", 
            "text": "from   mocha.ext   import   cache  class   Index ( Mocha ): \n\n     @cache.cached ( 500 ) \n     def   my_cache_view ( self ): \n         return", 
            "title": "cache"
        }, 
        {
            "location": "/views/decorators/#memoize", 
            "text": "", 
            "title": "memoize"
        }, 
        {
            "location": "/views/decorators/#csrf", 
            "text": "All POST methods are required to receive  _csrf_token  from the application.  It it fails, the user will not be able to use it.", 
            "title": "CSRF"
        }, 
        {
            "location": "/views/decorators/#exempt_csrf", 
            "text": "In some cases you will want to bypass a POST method CSRF check, to do, we\nhave to exempt that method  from   mocha.ext   import   csrf  import   mocha.decorators   as   deco  class   Index ( Mocha ): \n\n     @csrf.exempt \n     @deco.accept_post \n     def   my_exempted_csrf_post ( self ): \n         return", 
            "title": "exempt_csrf"
        }, 
        {
            "location": "/views/decorators/#nav_menu", 
            "text": "@nav_menu  creates a  navigation menu  for UI  from   mocha   import   nav_menu", 
            "title": "nav_menu"
        }, 
        {
            "location": "/views/decorators/#view_parser", 
            "text": "@view_parser  from   mocha   import   view_parser", 
            "title": "view_parser"
        }, 
        {
            "location": "/views/helpers/", 
            "text": "Utils are functions or objects that are exposed to the applications. They can be shortcuts, \nor from Flask itself. Some of them may extend some functionalities. \n\n\nconfig\n\n\n\n\npage_attr\n\n\nsend_mail\n\n\nget_env\n\n\nset_env\n\n\nget_env_app\n\n\nget_env_config\n\n\nmodels\n\n\nviews\n\n\nregister_package\n\n\ninit_app\n\n\nimport_module\n\n\nregister_models\n\n\nsend_mail\n\n\nupload\n\n\nstorage", 
            "title": "Helpers"
        }, 
        {
            "location": "/views/helpers/#config", 
            "text": "", 
            "title": "config"
        }, 
        {
            "location": "/views/helpers/#page_attr", 
            "text": "", 
            "title": "page_attr"
        }, 
        {
            "location": "/views/helpers/#send_mail", 
            "text": "", 
            "title": "send_mail"
        }, 
        {
            "location": "/views/helpers/#get_env", 
            "text": "", 
            "title": "get_env"
        }, 
        {
            "location": "/views/helpers/#set_env", 
            "text": "", 
            "title": "set_env"
        }, 
        {
            "location": "/views/helpers/#get_env_app", 
            "text": "", 
            "title": "get_env_app"
        }, 
        {
            "location": "/views/helpers/#get_env_config", 
            "text": "", 
            "title": "get_env_config"
        }, 
        {
            "location": "/views/helpers/#models", 
            "text": "", 
            "title": "models"
        }, 
        {
            "location": "/views/helpers/#views", 
            "text": "", 
            "title": "views"
        }, 
        {
            "location": "/views/helpers/#register_package", 
            "text": "", 
            "title": "register_package"
        }, 
        {
            "location": "/views/helpers/#init_app", 
            "text": "", 
            "title": "init_app"
        }, 
        {
            "location": "/views/helpers/#import_module", 
            "text": "", 
            "title": "import_module"
        }, 
        {
            "location": "/views/helpers/#register_models", 
            "text": "", 
            "title": "register_models"
        }, 
        {
            "location": "/views/helpers/#send_mail_1", 
            "text": "", 
            "title": "send_mail"
        }, 
        {
            "location": "/views/helpers/#upload", 
            "text": "", 
            "title": "upload"
        }, 
        {
            "location": "/views/helpers/#storage", 
            "text": "", 
            "title": "storage"
        }, 
        {
            "location": "/templates/", 
            "text": "Location: \n/application/templates\n\n\n\n\nStructure\n\n\nLayouts\n\n\nPages", 
            "title": "Templates"
        }, 
        {
            "location": "/templates/#structure", 
            "text": "", 
            "title": "Structure"
        }, 
        {
            "location": "/templates/#layouts", 
            "text": "", 
            "title": "Layouts"
        }, 
        {
            "location": "/templates/#pages", 
            "text": "", 
            "title": "Pages"
        }, 
        {
            "location": "/templates/filters/", 
            "text": "Mocha\n also has some convenient filter to use in your template\n\n\nlink_for\n\n\nlink_for\n creates an link tag base on endpoint\n\n\n{{\n \nlink_for\n(\nIndex:about_us\n)\n \n}}\n\n\n\n\n\n\nThe code above would result into a link similar to this \n\n\na\n \nhref=\n/about-us\nAbout Us\n/a\n\n\n\n\n\n\nBased on a view like this\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n\n    \n@nav_menu\n(\nAbout Us\n)\n\n    \ndef\n \nabout_us\n(\nself\n)\n:\n\n        \npass\n\n\n\n\n\n\ndate\n\n\ndate\n : To format a date based on the \nDATE_FORMAT\n in your config file\n\n\n{{\n \nvar_date\n \n|\n \ndate\n \n}}\n\n\n\n\n\n\ndate_time\n\n\ndate_time\n : To format a date based on the \nDATE_TIME_FORMAT\n in your config file\n\n\n{{\n \nvar_date\n \n|\n \ndate_time\n \n}}\n\n\n\n\n\n\nformat_datetime\n\n\nformat_datetime(format)\n : To format a date \n\n\n{{\n \nvar_date\n \n|\n \nformat_datetime\n(\nMM/DD/YYYY\n)\n \n}}\n\n\n\n\n\n\ndate_since\n\n\ndate_since\n :Show the date ago: show Today, Yesterday, July 27 (without year in same year), July 15 2014 \n\n\n{{\n \nvar_date\n \n|\n \ndate_since\n \n}}\n\n\n\n\n\n\ntime_since\n\n\ntime_since\n : To show the time ago: 3 min ago, 2 days ago, 1 year 7 days ago \n\n\n{{\n \nvar_date\n \n|\n \ntime_since\n \n}}\n\n\n\n\n\n\nimg_src\n\n\nimg_src\n: Generate an \n tag\n\n\n{{\n \nimage_url\n \n|\n \nimg_src\n \n}}\n\n\n\n\n\n\noembed\n\n\noembed\n: To generate an oembed tag. Mocha will load the content via JS\n\n\n{{\n \nurl\n \n|\n \noembed\n \n}}\n\n\n\n\n\n\nstatic\n\n\nstatic\n: Generates a a url for static file\n\n\nimg src=\n{{\n \nfile.jpg\n \n|\n \nstatic\n \n}}\n\n\n\n\n\n\nslugify\n\n\nslugify\n : \n\n\n{{\n \nvarname\n \n|\n \nslugify\n \n}}\n\n\n\n\n\n\nmarkdown\n\n\nmarkdown\n Transform a markdown text to safe html\n\n\n{{\n \nvar_markdown_content\n \n|\n \nmarkdown\n \n}}\n\n\n\n\n\n\nmarkdown_toc\n\n\nmarkdown_toc\n From the markdown content, generate the table of content\n\n\n{{\n \nvar_markdown_content\n \n|\n \nmarkdown_toc\n \n}}\n\n\n\n\n\n\n\n\nMacros\n\n\nForms\n\n\nForms expose forms fields.\n\n\n{\n%\n \nimport\n \nMocha/macros/forms.html\n \nas\n \nforms\n \nwith\n \ncontext\n \n%\n}\n\n\n\n\n\n\nforms.get\n\n\nCreate a GET form\n\n\nTo create a get form:\n\n{% call forms.get(request.endpoint) %}\n\n\n{% endcall %}\n\n\n\n\n\nforms.post\n\n\nCreate a POST form\n\n\nTo create a post form, which will automatically include the `csrf_token` to prevent cross-site request forgery.\n\n{% call forms.post(request.endpoint) %}\n\n\n{% endcall %}\n\n\n\n\n\nforms.upload\n\n\nCreate a UPLOAD form\n\n\nTo create a post form but with the ability to upload file, which will automatically include the `csrf_token` to prevent cross-site request forgery.\n\n{% call forms.upload(request.endpoint) %}\n\n\n{% endcall %}\n\n\n\n\n\nforms.input\n\n\n{{\n \nform.input\n(\nlabel\n=\nEnter your name\n,\n \nname\n=\nname\n,\n \nvalue\n=\n,\n \nplaceholder\n=\nEnter Name\n)\n \n}}\n\n\n\n\n\n\nforms.hidden\n\n\nforms.select\n\n\nforms.radio\n\n\nforms.checkbox\n\n\nforms.textarea\n\n\nforms.button\n\n\nforms.recaptcha\n\n\nIt creates the RECAPTCHA input \n\n\n{{\n \nforms.recaptcha\n()\n \n}}\n\n\n\n\n\n\nforms.examples\n\n\n{%\n \ncall\n \nforms.post\n(\nrequest.endpoint\n)\n \n%}\n\n\n\n    \n{{\n \nforms.input\n(\nlabel\n=\nName\n,\n \nname\n=\nname\n)\n \n}}\n\n\n    \n{{\n \nforms.input\n(\nlabel\n=\nCity\n,\n \nname\n=\ncity\n)\n \n}}\n\n\n    \n{{\n \nforms.radio\n(\nlabel\n=\nFavorite Colod\n,\n \nname\n=\nfav_color\n,\n \noptions\n=[(\nblue\n,\n \nBlue\n),\n \n(\nred\n,\n \nRed\n)])\n \n}}\n\n\n\n    \n{{\n \nforms.input\n(\nlabel\n=\nUpload Image\n,\n \nname\n=\nfile\n,\n \ntype\n=\nfile\n)\n \n}}\n\n\n\n    \n{{\n \nform.button\n(\ntype\n=\nsubmit\n)\n \n}}\n\n\n\n{%\n \nendcall\n \n%}\n\n\n\n\n\n\n\n\nWidget\n\n\nWidget exposes some bootstrap widget \n\n\n{\n%\n \nimport\n \nMocha/macros/forms.widget\n \nas\n \nwidget\n \nwith\n \ncontext\n \n%\n}\n\n\n\n\n\n\n\n\nMenu\n\n\n{\n%\n \nimport\n \nMocha/macros/menu.html\n \nas\n \nmenu\n \nwith\n \ncontext\n \n%\n}", 
            "title": "Filters"
        }, 
        {
            "location": "/templates/filters/#link_for", 
            "text": "link_for  creates an link tag base on endpoint  {{   link_for ( Index:about_us )   }}   The code above would result into a link similar to this   a   href= /about-us About Us /a   Based on a view like this  class   Index ( Mocha ) : \n\n     @nav_menu ( About Us ) \n     def   about_us ( self ) : \n         pass", 
            "title": "link_for"
        }, 
        {
            "location": "/templates/filters/#date", 
            "text": "date  : To format a date based on the  DATE_FORMAT  in your config file  {{   var_date   |   date   }}", 
            "title": "date"
        }, 
        {
            "location": "/templates/filters/#date_time", 
            "text": "date_time  : To format a date based on the  DATE_TIME_FORMAT  in your config file  {{   var_date   |   date_time   }}", 
            "title": "date_time"
        }, 
        {
            "location": "/templates/filters/#format_datetime", 
            "text": "format_datetime(format)  : To format a date   {{   var_date   |   format_datetime ( MM/DD/YYYY )   }}", 
            "title": "format_datetime"
        }, 
        {
            "location": "/templates/filters/#date_since", 
            "text": "date_since  :Show the date ago: show Today, Yesterday, July 27 (without year in same year), July 15 2014   {{   var_date   |   date_since   }}", 
            "title": "date_since"
        }, 
        {
            "location": "/templates/filters/#time_since", 
            "text": "time_since  : To show the time ago: 3 min ago, 2 days ago, 1 year 7 days ago   {{   var_date   |   time_since   }}", 
            "title": "time_since"
        }, 
        {
            "location": "/templates/filters/#img_src", 
            "text": "img_src : Generate an   tag  {{   image_url   |   img_src   }}", 
            "title": "img_src"
        }, 
        {
            "location": "/templates/filters/#oembed", 
            "text": "oembed : To generate an oembed tag. Mocha will load the content via JS  {{   url   |   oembed   }}", 
            "title": "oembed"
        }, 
        {
            "location": "/templates/filters/#static", 
            "text": "static : Generates a a url for static file  img src= {{   file.jpg   |   static   }}", 
            "title": "static"
        }, 
        {
            "location": "/templates/filters/#slugify", 
            "text": "slugify  :   {{   varname   |   slugify   }}", 
            "title": "slugify"
        }, 
        {
            "location": "/templates/filters/#markdown", 
            "text": "markdown  Transform a markdown text to safe html  {{   var_markdown_content   |   markdown   }}", 
            "title": "markdown"
        }, 
        {
            "location": "/templates/filters/#markdown_toc", 
            "text": "markdown_toc  From the markdown content, generate the table of content  {{   var_markdown_content   |   markdown_toc   }}", 
            "title": "markdown_toc"
        }, 
        {
            "location": "/templates/filters/#macros", 
            "text": "", 
            "title": "Macros"
        }, 
        {
            "location": "/templates/filters/#forms", 
            "text": "Forms expose forms fields.  { %   import   Mocha/macros/forms.html   as   forms   with   context   % }", 
            "title": "Forms"
        }, 
        {
            "location": "/templates/filters/#formsget", 
            "text": "", 
            "title": "forms.get"
        }, 
        {
            "location": "/templates/filters/#create-a-get-form", 
            "text": "To create a get form:\n\n{% call forms.get(request.endpoint) %}\n\n\n{% endcall %}", 
            "title": "Create a GET form"
        }, 
        {
            "location": "/templates/filters/#formspost", 
            "text": "", 
            "title": "forms.post"
        }, 
        {
            "location": "/templates/filters/#create-a-post-form", 
            "text": "To create a post form, which will automatically include the `csrf_token` to prevent cross-site request forgery.\n\n{% call forms.post(request.endpoint) %}\n\n\n{% endcall %}", 
            "title": "Create a POST form"
        }, 
        {
            "location": "/templates/filters/#formsupload", 
            "text": "", 
            "title": "forms.upload"
        }, 
        {
            "location": "/templates/filters/#create-a-upload-form", 
            "text": "To create a post form but with the ability to upload file, which will automatically include the `csrf_token` to prevent cross-site request forgery.\n\n{% call forms.upload(request.endpoint) %}\n\n\n{% endcall %}", 
            "title": "Create a UPLOAD form"
        }, 
        {
            "location": "/templates/filters/#formsinput", 
            "text": "{{   form.input ( label = Enter your name ,   name = name ,   value = ,   placeholder = Enter Name )   }}", 
            "title": "forms.input"
        }, 
        {
            "location": "/templates/filters/#formshidden", 
            "text": "", 
            "title": "forms.hidden"
        }, 
        {
            "location": "/templates/filters/#formsselect", 
            "text": "", 
            "title": "forms.select"
        }, 
        {
            "location": "/templates/filters/#formsradio", 
            "text": "", 
            "title": "forms.radio"
        }, 
        {
            "location": "/templates/filters/#formscheckbox", 
            "text": "", 
            "title": "forms.checkbox"
        }, 
        {
            "location": "/templates/filters/#formstextarea", 
            "text": "", 
            "title": "forms.textarea"
        }, 
        {
            "location": "/templates/filters/#formsbutton", 
            "text": "", 
            "title": "forms.button"
        }, 
        {
            "location": "/templates/filters/#formsrecaptcha", 
            "text": "It creates the RECAPTCHA input   {{   forms.recaptcha ()   }}", 
            "title": "forms.recaptcha"
        }, 
        {
            "location": "/templates/filters/#formsexamples", 
            "text": "{%   call   forms.post ( request.endpoint )   %}       {{   forms.input ( label = Name ,   name = name )   }}       {{   forms.input ( label = City ,   name = city )   }}       {{   forms.radio ( label = Favorite Colod ,   name = fav_color ,   options =[( blue ,   Blue ),   ( red ,   Red )])   }}       {{   forms.input ( label = Upload Image ,   name = file ,   type = file )   }}       {{   form.button ( type = submit )   }}  {%   endcall   %}", 
            "title": "forms.examples"
        }, 
        {
            "location": "/templates/filters/#widget", 
            "text": "Widget exposes some bootstrap widget   { %   import   Mocha/macros/forms.widget   as   widget   with   context   % }", 
            "title": "Widget"
        }, 
        {
            "location": "/templates/filters/#menu", 
            "text": "{ %   import   Mocha/macros/menu.html   as   menu   with   context   % }", 
            "title": "Menu"
        }, 
        {
            "location": "/templates/forms/", 
            "text": "", 
            "title": "Forms"
        }, 
        {
            "location": "/templates/widgets/", 
            "text": "Templates\n\n\nTemplates\n\n\nAssets\n\n\nStatic", 
            "title": "Widgets"
        }, 
        {
            "location": "/templates/widgets/#templates", 
            "text": "Templates", 
            "title": "Templates"
        }, 
        {
            "location": "/templates/widgets/#assets", 
            "text": "", 
            "title": "Assets"
        }, 
        {
            "location": "/templates/widgets/#static", 
            "text": "", 
            "title": "Static"
        }, 
        {
            "location": "/templates/navs/", 
            "text": "", 
            "title": "Navs"
        }, 
        {
            "location": "/assets/", 
            "text": "Location: \n/application/static", 
            "title": "Assets"
        }, 
        {
            "location": "/models/", 
            "text": "Location: \n/application/models.py\n\n\n\n\nConfiguration\n\n\n\n\ndb\n\n\n\n\nmodel\n\n\n\n\nTypes\n\n\n\n\nSpecial Types\n\n\nBeside the default SQLAlchemy column types,\n\n\nSQLAlchemy-Utils\n\n\n\n\nDateTime\n\n\nAlias to ArrowType, which provides way of saving \nArrow\n objects into database.\nIt automatically changes Arrow objects to datetime objects on the way in and\ndatetime objects back to Arrow objects on the way out (when querying database).\n\n\nExample\n\n\nfrom\n \nmocha\n \nimport\n \ndb\n\n\n\nclass\n \nArticle\n(\ndb\n.\nModel\n):\n\n    \ntitle\n \n=\n \ndb\n.\nColumn\n(\ndb\n.\nString\n(\n255\n))\n\n    \npublished_at\n \n=\n \ndb\n.\nColumn\n(\ndb\n.\nDateTime\n)\n\n\n\n\n\n\n Create \n\n\nfrom\n \nmocha\n \nimport\n \nutc_now\n,\n \nmodels\n\n\n\nmodels\n.\nArticle\n.\ncreate\n(\ntitle\n=\nHi\n,\n \npublished_at\n=\nutc_now\n)\n\n\n\n\n\n\n Read \n\n\nfrom\n \nmocha\n \nimport\n \nmodels\n\n\n\narticle\n \n=\n \nmodels\n.\nArticle\n.\nget\n(\n1\n)\n\n\n\narticle\n.\ncreated_at\n \n=\n \narticle\n.\ncreated_at\n.\nreplace\n(\nhours\n=-\n1\n)\n\n\n\narticle\n.\ncreated_at\n.\nhumanize\n()\n\n\n# \nan hour ago\n\n\n\n\n\n\n Links \n\n\nArrowType\n\n\nArrow\n\n\nArrow Tokens\n\n\n\n\nStorageObjectType\n\n\nStorageObjectType offers way of saving \nStorage.Object\n data structures to database.\nIt automatically changes Arrow objects to JSON objects on the way in and\n\nStorage.Object\n objects back on the way out (when querying database).\n\n\nExample\n\n\nfrom\n \nmocha\n \nimport\n \ndb\n\n\n\nclass\n \nArticle\n(\ndb\n.\nModel\n):\n\n    \ntitle\n \n=\n \ndb\n.\nColumn\n(\ndb\n.\nString\n(\n255\n))\n\n    \npublished_at\n \n=\n \ndb\n.\nColumn\n(\ndb\n.\nDateTime\n)\n\n    \nimage\n \n=\n \ndb\n.\nColumn\n(\ndb\n.\nStorageObjectType\n)\n\n\n\n\n\n\n Create \n\n\nfrom\n \nmocha\n \nimport\n \nutc_now\n,\n \nmodels\n,\n \nupload_file\n\n\n\nimage_file\n \n=\n \nfile/xyz.jpg\n\n\nimage\n \n=\n \nupload_file\n(\nimage_file\n)\n\n\n\nmodels\n.\nArticle\n.\ncreate\n(\ntitle\n=\nHi\n,\n \npublished_at\n=\nutc_now\n,\n \nimage\n=\nimage\n)\n\n\n\n\n\n\n Read \n\n\nfrom\n \nmocha\n \nimport\n \nmodels\n\n\n\narticle\n \n=\n \nmodels\n.\nArticle\n.\nget\n(\n1\n)\n\n\n\narticle\n.\nimage\n.\nurl\n\n\narticle\n.\nimage\n.\nsize\n\n\narticle\n.\nimage\n.\ndownload\n()\n\n\n\n\n\n\n\n\nEmailType\n\n\nProvides a way for storing emails in a lower case.\n\n\nExample\n\n\nfrom\n \nmocha\n \nimport\n \ndb\n\n\n\nclass\n \nArticle\n(\ndb\n.\nModel\n):\n\n    \ntitle\n \n=\n \ndb\n.\nColumn\n(\ndb\n.\nString\n(\n255\n))\n\n    \npublished_at\n \n=\n \ndb\n.\nColumn\n(\ndb\n.\nDateTime\n)\n\n    \nemail\n \n=\n \ndb\n.\nColumn\n(\ndb\n.\nEmailType\n)\n\n\n\n\n\n\nLink: \nEmailType\n\n\n\n\nJSONType\n\n\nJSONType offers way of saving JSON data structures to database.\nOn PostgreSQL the underlying implementation of this data type is \u2018json\u2019\nwhile on other databases its simply \u2018text\u2019.\n\n\nExample\n\n\nfrom\n \nmocha\n \nimport\n \ndb\n\n\n\nclass\n \nArticle\n(\ndb\n.\nModel\n):\n\n    \ntitle\n \n=\n \ndb\n.\nColumn\n(\ndb\n.\nString\n(\n255\n))\n\n    \npublished_at\n \n=\n \ndb\n.\nColumn\n(\ndb\n.\nDateTime\n)\n\n    \ndata\n \n=\n \ndb\n.\nColumn\n(\ndb\n.\nJSONType\n)\n\n\n\n\n\n\n Create \n\n\nfrom\n \nmocha\n \nimport\n \nmodels\n,\n \nutc_now\n\n\n\nmodels\n.\nArticle\n.\ncreate\n(\ntitle\n=\nHello\n,\n\n                      \npublished_at\n=\nutc_now\n,\n\n                      \ndata\n=\n{\n\n                        \nreference\n:\n \nblah\n,\n\n                        \ntags\n:\n \n[\nA\n,\n \nB\n,\n \nC\n]\n\n                      \n})\n\n\n\n\n\n\n Read \n\n\narticle = models.Article.get(1)\n\narticle.data.get(\nreference\n)\n# blah\n\narticle.data.get(\ntags\n)\n# [\nA\n, \nB\n, \nC\n]\n\narticle.data.get(\nlocation\n, \nCharlotte\n)\n# Charlotte\n\n\n\n\n\nLink: \nJSONType\n\n\n\n\nGeneric Types\n\n\n\n\nSQLAlchemy-Utils Types\n\n\nIf you want to use the other types from\n\nSQLAlchemy-Utils\n\n\n\n\nArrowType\n\n\nChoiceType\n\n\nColorType\n\n\nCountryType\n\n\nCurrencyType\n\n\nEmailType\n\n\nEncryptedType\n\n\nJSONType\n\n\nLocaleType\n\n\nLtreeType\n\n\nIPAddressType\n\n\nPasswordType\n\n\nPhoneNumberType\n\n\nScalarListType\n\n\nTimezoneType\n\n\nTSVectorType\n\n\nURLType\n\n\nUUIDType\n\n\nWeekDaysType", 
            "title": "Models"
        }, 
        {
            "location": "/models/#configuration", 
            "text": "", 
            "title": "Configuration"
        }, 
        {
            "location": "/models/#db", 
            "text": "", 
            "title": "db"
        }, 
        {
            "location": "/models/#model", 
            "text": "", 
            "title": "model"
        }, 
        {
            "location": "/models/#types", 
            "text": "", 
            "title": "Types"
        }, 
        {
            "location": "/models/#special-types", 
            "text": "Beside the default SQLAlchemy column types,  SQLAlchemy-Utils", 
            "title": "Special Types"
        }, 
        {
            "location": "/models/#datetime", 
            "text": "Alias to ArrowType, which provides way of saving  Arrow  objects into database.\nIt automatically changes Arrow objects to datetime objects on the way in and\ndatetime objects back to Arrow objects on the way out (when querying database).  Example  from   mocha   import   db  class   Article ( db . Model ): \n     title   =   db . Column ( db . String ( 255 )) \n     published_at   =   db . Column ( db . DateTime )    Create   from   mocha   import   utc_now ,   models  models . Article . create ( title = Hi ,   published_at = utc_now )    Read   from   mocha   import   models  article   =   models . Article . get ( 1 )  article . created_at   =   article . created_at . replace ( hours =- 1 )  article . created_at . humanize ()  #  an hour ago    Links   ArrowType  Arrow  Arrow Tokens", 
            "title": "DateTime"
        }, 
        {
            "location": "/models/#storageobjecttype", 
            "text": "StorageObjectType offers way of saving  Storage.Object  data structures to database.\nIt automatically changes Arrow objects to JSON objects on the way in and Storage.Object  objects back on the way out (when querying database).  Example  from   mocha   import   db  class   Article ( db . Model ): \n     title   =   db . Column ( db . String ( 255 )) \n     published_at   =   db . Column ( db . DateTime ) \n     image   =   db . Column ( db . StorageObjectType )    Create   from   mocha   import   utc_now ,   models ,   upload_file  image_file   =   file/xyz.jpg  image   =   upload_file ( image_file )  models . Article . create ( title = Hi ,   published_at = utc_now ,   image = image )    Read   from   mocha   import   models  article   =   models . Article . get ( 1 )  article . image . url  article . image . size  article . image . download ()", 
            "title": "StorageObjectType"
        }, 
        {
            "location": "/models/#emailtype", 
            "text": "Provides a way for storing emails in a lower case.  Example  from   mocha   import   db  class   Article ( db . Model ): \n     title   =   db . Column ( db . String ( 255 )) \n     published_at   =   db . Column ( db . DateTime ) \n     email   =   db . Column ( db . EmailType )   Link:  EmailType", 
            "title": "EmailType"
        }, 
        {
            "location": "/models/#jsontype", 
            "text": "JSONType offers way of saving JSON data structures to database.\nOn PostgreSQL the underlying implementation of this data type is \u2018json\u2019\nwhile on other databases its simply \u2018text\u2019.  Example  from   mocha   import   db  class   Article ( db . Model ): \n     title   =   db . Column ( db . String ( 255 )) \n     published_at   =   db . Column ( db . DateTime ) \n     data   =   db . Column ( db . JSONType )    Create   from   mocha   import   models ,   utc_now  models . Article . create ( title = Hello , \n                       published_at = utc_now , \n                       data = { \n                         reference :   blah , \n                         tags :   [ A ,   B ,   C ] \n                       })    Read   article = models.Article.get(1)\n\narticle.data.get( reference )\n# blah\n\narticle.data.get( tags )\n# [ A ,  B ,  C ]\n\narticle.data.get( location ,  Charlotte )\n# Charlotte  Link:  JSONType", 
            "title": "JSONType"
        }, 
        {
            "location": "/models/#generic-types", 
            "text": "", 
            "title": "Generic Types"
        }, 
        {
            "location": "/models/#sqlalchemy-utils-types", 
            "text": "If you want to use the other types from SQLAlchemy-Utils   ArrowType  ChoiceType  ColorType  CountryType  CurrencyType  EmailType  EncryptedType  JSONType  LocaleType  LtreeType  IPAddressType  PasswordType  PhoneNumberType  ScalarListType  TimezoneType  TSVectorType  URLType  UUIDType  WeekDaysType", 
            "title": "SQLAlchemy-Utils Types"
        }, 
        {
            "location": "/utils/", 
            "text": "Utils contains some common function and also exposes under the \nutils\n\nnamespace some 3rd party function for convenience\n\n\nImport\n\n\nImport the utils as follow:\n\n\nfrom\n \nmocha\n \nimport\n \nutils\n\n\n\n\n\n\n Available Utils: \n\n\n\n\nis_email_valid\n\n\n\n\nis_password_valid\n\n\n\n\nis_username_valid\n\n\n\n\nis_url_valid\n\n\n\n\nurlencode\n\n\n\n\nurldecode\n\n\n\n\nmd5\n\n\n\n\nguid\n\n\n\n\nslugify\n\n\n\n\nundescore\n\n\n\n\ndasherize\n\n\n\n\ncamelize\n\n\n\n\npluralize\n\n\n\n\nsinguralize\n\n\n\n\ntitleize\n\n\n\n\nchunk_list\n\n\n\n\nin_any_list\n\n\n\n\nsign_jwt\n\n\n\n\nunsign_jwt\n\n\n\n\nsign_url_safe\n\n\n\n\nunsign_url_safe\n\n\n\n\nsign_data\n\n\n\n\nunsign_data\n\n\n\n\nto_json\n\n\n\n\nlist_replace\n\n\n\n\ndict_replace\n\n\n\n\ndictdot\n\n\n\n\ngenerate_random_string\n\n\n\n\ngenerate_random_hash", 
            "title": "Utils"
        }, 
        {
            "location": "/utils/#is_email_valid", 
            "text": "", 
            "title": "is_email_valid"
        }, 
        {
            "location": "/utils/#is_password_valid", 
            "text": "", 
            "title": "is_password_valid"
        }, 
        {
            "location": "/utils/#is_username_valid", 
            "text": "", 
            "title": "is_username_valid"
        }, 
        {
            "location": "/utils/#is_url_valid", 
            "text": "", 
            "title": "is_url_valid"
        }, 
        {
            "location": "/utils/#urlencode", 
            "text": "", 
            "title": "urlencode"
        }, 
        {
            "location": "/utils/#urldecode", 
            "text": "", 
            "title": "urldecode"
        }, 
        {
            "location": "/utils/#md5", 
            "text": "", 
            "title": "md5"
        }, 
        {
            "location": "/utils/#guid", 
            "text": "", 
            "title": "guid"
        }, 
        {
            "location": "/utils/#slugify", 
            "text": "", 
            "title": "slugify"
        }, 
        {
            "location": "/utils/#undescore", 
            "text": "", 
            "title": "undescore"
        }, 
        {
            "location": "/utils/#dasherize", 
            "text": "", 
            "title": "dasherize"
        }, 
        {
            "location": "/utils/#camelize", 
            "text": "", 
            "title": "camelize"
        }, 
        {
            "location": "/utils/#pluralize", 
            "text": "", 
            "title": "pluralize"
        }, 
        {
            "location": "/utils/#singuralize", 
            "text": "", 
            "title": "singuralize"
        }, 
        {
            "location": "/utils/#titleize", 
            "text": "", 
            "title": "titleize"
        }, 
        {
            "location": "/utils/#chunk_list", 
            "text": "", 
            "title": "chunk_list"
        }, 
        {
            "location": "/utils/#in_any_list", 
            "text": "", 
            "title": "in_any_list"
        }, 
        {
            "location": "/utils/#sign_jwt", 
            "text": "", 
            "title": "sign_jwt"
        }, 
        {
            "location": "/utils/#unsign_jwt", 
            "text": "", 
            "title": "unsign_jwt"
        }, 
        {
            "location": "/utils/#sign_url_safe", 
            "text": "", 
            "title": "sign_url_safe"
        }, 
        {
            "location": "/utils/#unsign_url_safe", 
            "text": "", 
            "title": "unsign_url_safe"
        }, 
        {
            "location": "/utils/#sign_data", 
            "text": "", 
            "title": "sign_data"
        }, 
        {
            "location": "/utils/#unsign_data", 
            "text": "", 
            "title": "unsign_data"
        }, 
        {
            "location": "/utils/#to_json", 
            "text": "", 
            "title": "to_json"
        }, 
        {
            "location": "/utils/#list_replace", 
            "text": "", 
            "title": "list_replace"
        }, 
        {
            "location": "/utils/#dict_replace", 
            "text": "", 
            "title": "dict_replace"
        }, 
        {
            "location": "/utils/#dictdot", 
            "text": "", 
            "title": "dictdot"
        }, 
        {
            "location": "/utils/#generate_random_string", 
            "text": "", 
            "title": "generate_random_string"
        }, 
        {
            "location": "/utils/#generate_random_hash", 
            "text": "", 
            "title": "generate_random_hash"
        }, 
        {
            "location": "/pagination/", 
            "text": "Import \n\n\nfrom\n \nmocha\n \nimport\n \npaginate\n\n\n\n\n\n\n Usage", 
            "title": "Pagination"
        }, 
        {
            "location": "/signals/", 
            "text": "Mocha uses \nBlinker\n\nto provide a fast dispatching system that allows any number of\ninterested parties to subscribe to events, or \u201csignals\u201d.\n\n\nAs it will be described below, a best way to use signal is to dispatch data/message\nbetween modules.\n\n\nFor example, when a user register using the built-in AUTH, you may want to do\nsomething with that new user. So the create_user emit a signal containing\nthe new user data, and each function observing the create_user, will be executed\n\n\n Import \n\n\nfrom\n \nmocha.decorators\n \nimport\n \nemit_signal\n\n\n\n\n\n\nEmit Signal\n\n\n@emit_signal\n\n\nA decorator that will turn a function into a signal emitter, which will contain\na \npre\n and \npost\n signal.\n\n\n# signals.py\n\n\nfrom\n \nmocha\n \nimport\n \ndecorators\n \nas\n \ndeco\n\n\n\n@deco.emit_signal\n\n\ndef\n \ndo_something\n(\ndata\n):\n\n    \nreturn\n \ndata\n\n\n\n\n\n\nThe example above creates a signal \ndo_something\n, each time this function\nis invoked it will emit two signals \ndo_something.pre\n\nand \ndo_something.post\n. These objects (pre, post) were created when \n@emit_signal\n\ndecorated the \ndo_something\n function.\n\n\npre\n will be invoked before running accepting the signal, and \npost\n after the\nsignal is executed.\n\n\nFor every \n@emit_signal\n use, the function will have two blinker signal objects:\n\npre\n and \npost\n\n\n@emit_signal\ndef hello():\n    pass\n\n\n\n\n\nwill now have the following decorators:\n\n\n@hello.post\n@hello.pre\n\n\n\n\n\nReceive Signal\n\n\n@observe\n\n\n@observe\n allows you to connect a function to an emitter. \n@observe\n is a shortcut\nfor \n@post.connect\n.\n\n\nimport\n \nmy_signals\n\n\n\n@signals.do_something.observe\n\n\ndef\n \nmy_thing\n(\nresult\n,\n \n**\nkw\n):\n\n    \nif\n \nresult\n:\n\n        \npass\n\n\n\n\n\n\nTo fully utilize Blinker functionalities, use \npost\n and \npre\n, for example\n\n@do_something.post.connect\n, \n@do_something.pre.connect\n\n\n@post.connect\n\n\n@signals.do_something.post.connect\ndef receive_create_user(user, **kw):\n    if user:\n        # do something with user\n\n\n\n\n\nThe function receiving the signal, must have 2 args:\n\n\n\n\nresult: that's the result sent from the signal\n\n\n**kwargs: some\n\n\nkwargs: kwargs that were passed in the signal function\n\n\nsender: The name of the function\n\n\nemitter: The instance of the\n\n\n\n\n\n\n\n\n@pre.connect\n\n\n@signals.do_something.pre.connect\ndef receive_create_user_pre(**kw):\n    # do something", 
            "title": "Signals"
        }, 
        {
            "location": "/signals/#emit-signal", 
            "text": "", 
            "title": "Emit Signal"
        }, 
        {
            "location": "/signals/#emit_signal", 
            "text": "A decorator that will turn a function into a signal emitter, which will contain\na  pre  and  post  signal.  # signals.py  from   mocha   import   decorators   as   deco  @deco.emit_signal  def   do_something ( data ): \n     return   data   The example above creates a signal  do_something , each time this function\nis invoked it will emit two signals  do_something.pre \nand  do_something.post . These objects (pre, post) were created when  @emit_signal \ndecorated the  do_something  function.  pre  will be invoked before running accepting the signal, and  post  after the\nsignal is executed.  For every  @emit_signal  use, the function will have two blinker signal objects: pre  and  post  @emit_signal\ndef hello():\n    pass  will now have the following decorators:  @hello.post\n@hello.pre", 
            "title": "@emit_signal"
        }, 
        {
            "location": "/signals/#receive-signal", 
            "text": "", 
            "title": "Receive Signal"
        }, 
        {
            "location": "/signals/#observe", 
            "text": "@observe  allows you to connect a function to an emitter.  @observe  is a shortcut\nfor  @post.connect .  import   my_signals  @signals.do_something.observe  def   my_thing ( result ,   ** kw ): \n     if   result : \n         pass   To fully utilize Blinker functionalities, use  post  and  pre , for example @do_something.post.connect ,  @do_something.pre.connect", 
            "title": "@observe"
        }, 
        {
            "location": "/signals/#postconnect", 
            "text": "@signals.do_something.post.connect\ndef receive_create_user(user, **kw):\n    if user:\n        # do something with user  The function receiving the signal, must have 2 args:   result: that's the result sent from the signal  **kwargs: some  kwargs: kwargs that were passed in the signal function  sender: The name of the function  emitter: The instance of the", 
            "title": "@post.connect"
        }, 
        {
            "location": "/signals/#preconnect", 
            "text": "@signals.do_something.pre.connect\ndef receive_create_user_pre(**kw):\n    # do something", 
            "title": "@pre.connect"
        }, 
        {
            "location": "/ext/arrow/", 
            "text": "Arrow\n is a Python library that offers a sensible, human-friendly approach to creating,\nmanipulating, formatting and converting dates, times, and timestamps.\nIt implements and updates the datetime type, plugging gaps in functionality,\nand provides an intelligent module API that supports many common creation scenarios.\nSimply put, it helps you work with dates and times with fewer imports and a lot less code.", 
            "title": "Arrow"
        }, 
        {
            "location": "/ext/bcrypt/", 
            "text": "bcrypt\n from the \npasslib\n library is used to hash and verify password.\n\n\nImport\n\n\nfrom\n \nmocha\n \nimport\n \nbcrypt\n\n\n\n\n\n\nHash password\n\n\nHash a password for storage\n\n\nmy_string_pass = \nmypass123\n\nmy_hash = bcrypt.hash(my_string_pass)\n\n\n\n\n\nVerify password\n\n\nVerify a password by using the string provided to hash, and the hash that was created previously. It returns a bool.\n\n\nbcrypt.verify(my_string_pass, my_hash)\n\n\n\n\n\nConfig\n\n\nbcrypt\n can be used with no configuration as it will fall back to its default. But if you want you can have the following\nconfig\n\n\nBCRYPT_SALT = \n\n\nBCRYPT_ROUNDS = 12\n\nBCRYPT_INDENT =", 
            "title": "Bcrypt"
        }, 
        {
            "location": "/ext/bcrypt/#import", 
            "text": "from   mocha   import   bcrypt", 
            "title": "Import"
        }, 
        {
            "location": "/ext/bcrypt/#hash-password", 
            "text": "Hash a password for storage  my_string_pass =  mypass123 \nmy_hash = bcrypt.hash(my_string_pass)", 
            "title": "Hash password"
        }, 
        {
            "location": "/ext/bcrypt/#verify-password", 
            "text": "Verify a password by using the string provided to hash, and the hash that was created previously. It returns a bool.  bcrypt.verify(my_string_pass, my_hash)", 
            "title": "Verify password"
        }, 
        {
            "location": "/ext/bcrypt/#config", 
            "text": "bcrypt  can be used with no configuration as it will fall back to its default. But if you want you can have the following\nconfig  BCRYPT_SALT =  \n\nBCRYPT_ROUNDS = 12\n\nBCRYPT_INDENT =", 
            "title": "Config"
        }, 
        {
            "location": "/ext/cache/", 
            "text": "flask_cache\n is used to cache data. It allows to use different backend, ie: Redis, Memcache, etc.\n\n\nImport\n\n\nfrom\n \nmocha\n \nimport\n \ncache\n\n\n\n\n\n\nDecorator\n\n\nfrom\n \nmocha\n \nimport\n \nMocha\n,\n \ncache\n\n\n\nclass\n \nIndex\n(\nMocha\n):\n\n\n    \n@cache.cached\n(\n3600\n)\n\n    \ndef\n \nindex\n(\nself\n):\n\n        \nreturn\n \n{\n\n\n        \n}\n\n\n\n\n\n\nConfig\n\n\n#: CACHE_TYPE\n#: The type of cache to use\n#: null, simple, redis, filesystem,\nCACHE_TYPE = \nsimple\n\n\n#: CACHE_REDIS_URL\n#: If CHACHE_TYPE is \nredis\n, set the redis uri\n#: redis://username:password@host:port/db\nCACHE_REDIS_URL = \n\n\n#: CACHE_DIR\n#: Directory to store cache if CACHE_TYPE is filesystem, it will\nCACHE_DIR = \n\n\n\n\n\n\nExtension: \nflask-cache", 
            "title": "Cache"
        }, 
        {
            "location": "/ext/cache/#import", 
            "text": "from   mocha   import   cache", 
            "title": "Import"
        }, 
        {
            "location": "/ext/cache/#decorator", 
            "text": "from   mocha   import   Mocha ,   cache  class   Index ( Mocha ): \n\n     @cache.cached ( 3600 ) \n     def   index ( self ): \n         return   { \n\n         }", 
            "title": "Decorator"
        }, 
        {
            "location": "/ext/cache/#config", 
            "text": "#: CACHE_TYPE\n#: The type of cache to use\n#: null, simple, redis, filesystem,\nCACHE_TYPE =  simple \n\n#: CACHE_REDIS_URL\n#: If CHACHE_TYPE is  redis , set the redis uri\n#: redis://username:password@host:port/db\nCACHE_REDIS_URL =  \n\n#: CACHE_DIR\n#: Directory to store cache if CACHE_TYPE is filesystem, it will\nCACHE_DIR =    Extension:  flask-cache", 
            "title": "Config"
        }, 
        {
            "location": "/ext/storage/", 
            "text": "storage\n\n\nAllows you to to access, upload, download, save and delete files on cloud\nstorage providers such as: AWS S3, Google Storage, Microsoft Azure,\nRackspace Cloudfiles, and even Local file system\n\n\nImport\n\n\nfrom\n \nmocha\n \nimport\n \nstorage\n\n\n\n\n\n\nUpload File\n\n\nDelete File\n\n\nConfig\n\n\nEdit the keys below in your config class file:\n\n\n#: STORAGE_PROVIDER:\n# The provider to use. By default it\ns \nLOCAL\n.\n# You can use:\n# LOCAL, S3, GOOGLE_STORAGE, AZURE_BLOBS, CLOUDFILES\nSTORAGE_PROVIDER = \nLOCAL\n\n\n#: STORAGE_KEY\n# The storage key. Leave it blank if PROVIDER is LOCAL\nSTORAGE_KEY = AWS_ACCESS_KEY_ID\n\n#: STORAGE_SECRET\n#: The storage secret key. Leave it blank if PROVIDER is LOCAL\nSTORAGE_SECRET = AWS_SECRET_ACCESS_KEY\n\n#: STORAGE_REGION_NAME\n#: The region for the storage. Leave it blank if PROVIDER is LOCAL\nSTORAGE_REGION_NAME = AWS_REGION_NAME\n\n#: STORAGE_CONTAINER\n#: The Bucket name (for S3, Google storage, Azure, cloudfile)\n#: or the directory name (LOCAL) to access\nSTORAGE_CONTAINER = os.path.join(APPLICATION_DATA_DIR, \nuploads\n)\n\n#: STORAGE_SERVER\n#: Bool, to serve local file\nSTORAGE_SERVER = True\n\n#: STORAGE_SERVER_URL\n#: The url suffix for local storage\nSTORAGE_SERVER_URL = \nfiles\n\n\n\n\n\n\nstorage.get\n\n\nAllows you to get a file from the storage\n\n\nmy_file = storage.get(\nmyfile.jpg\n)\n\nmy_file.name  # return The file name\n\nmy_file.size  # returns file size\n\n\n\n\n\nstorage.upload", 
            "title": "Storage"
        }, 
        {
            "location": "/ext/storage/#storage", 
            "text": "Allows you to to access, upload, download, save and delete files on cloud\nstorage providers such as: AWS S3, Google Storage, Microsoft Azure,\nRackspace Cloudfiles, and even Local file system", 
            "title": "storage"
        }, 
        {
            "location": "/ext/storage/#import", 
            "text": "from   mocha   import   storage", 
            "title": "Import"
        }, 
        {
            "location": "/ext/storage/#upload-file", 
            "text": "", 
            "title": "Upload File"
        }, 
        {
            "location": "/ext/storage/#delete-file", 
            "text": "", 
            "title": "Delete File"
        }, 
        {
            "location": "/ext/storage/#config", 
            "text": "Edit the keys below in your config class file:  #: STORAGE_PROVIDER:\n# The provider to use. By default it s  LOCAL .\n# You can use:\n# LOCAL, S3, GOOGLE_STORAGE, AZURE_BLOBS, CLOUDFILES\nSTORAGE_PROVIDER =  LOCAL \n\n#: STORAGE_KEY\n# The storage key. Leave it blank if PROVIDER is LOCAL\nSTORAGE_KEY = AWS_ACCESS_KEY_ID\n\n#: STORAGE_SECRET\n#: The storage secret key. Leave it blank if PROVIDER is LOCAL\nSTORAGE_SECRET = AWS_SECRET_ACCESS_KEY\n\n#: STORAGE_REGION_NAME\n#: The region for the storage. Leave it blank if PROVIDER is LOCAL\nSTORAGE_REGION_NAME = AWS_REGION_NAME\n\n#: STORAGE_CONTAINER\n#: The Bucket name (for S3, Google storage, Azure, cloudfile)\n#: or the directory name (LOCAL) to access\nSTORAGE_CONTAINER = os.path.join(APPLICATION_DATA_DIR,  uploads )\n\n#: STORAGE_SERVER\n#: Bool, to serve local file\nSTORAGE_SERVER = True\n\n#: STORAGE_SERVER_URL\n#: The url suffix for local storage\nSTORAGE_SERVER_URL =  files", 
            "title": "Config"
        }, 
        {
            "location": "/ext/storage/#storageget", 
            "text": "Allows you to get a file from the storage  my_file = storage.get( myfile.jpg )\n\nmy_file.name  # return The file name\n\nmy_file.size  # returns file size", 
            "title": "storage.get"
        }, 
        {
            "location": "/ext/storage/#storageupload", 
            "text": "", 
            "title": "storage.upload"
        }, 
        {
            "location": "/ext/csrf/", 
            "text": "csrf\n prevents cross-site request forgery (CSRF) on your application\n\n\nImport\n\n\nfrom\n \nmocha\n \nimport\n \ncsrf\n\n\n\n\n\n\nAutomatically all POST, UPDATE methods will require a CSRF token, unless explicitly exempt.\n\n\nTo exempt and endpoint, jus add the decorator \ncsrf.exempt\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n\n    \ndef\n \nindex\n(\nself\n)\n:\n\n        \npass\n\n\n    \n@csrf\n.\nexempt\n\n    \ndef\n \nexempted_post\n(\nself\n)\n:\n\n        \npass\n\n\n    \n@post\n()\n\n    \ndef\n \nsave_data\n(\nself\n)\n:\n\n        \npass\n\n\n\n\n\n\nIn the example above, when posting to \n/exempted-post/\n it will not require the CSRF token,\nhowever \n/save-data/\n requires it.\n\n\nConfig\n\n\n    CSRF_COOKIE_NAME  # _csrf_token\n    CSRF_HEADER_NAME  # X-CSRFToken\n    CSRF_DISABLE\n    CSRF_COOKIE_TIMEOUT\n    CSRF_COOKIE_SECURE\n    CSRF_COOKIE_HTTPONLY\n    CSRF_COOKIE_DOMAIN\n    CSRF_CHECK_REFERER\n    SEASURF_INCLUDE_OR_EXEMPT_VIEWS\n\n\n\n\n\nAbout\n\n\nExtension: \nflask-seasurf\n\n\nSeaSurf is a Flask extension for preventing cross-site request forgery (CSRF).\n\n\nCSRF vulnerabilities have been found in large and popular sites such as YouTube.\nThese attacks are problematic because the mechanism they use is relatively easy to exploit.\nThis extension attempts to aid you in securing your application from such attacks.", 
            "title": "CSRF"
        }, 
        {
            "location": "/ext/csrf/#import", 
            "text": "from   mocha   import   csrf   Automatically all POST, UPDATE methods will require a CSRF token, unless explicitly exempt.  To exempt and endpoint, jus add the decorator  csrf.exempt  class   Index ( Mocha ) : \n\n     def   index ( self ) : \n         pass \n\n     @csrf . exempt \n     def   exempted_post ( self ) : \n         pass \n\n     @post () \n     def   save_data ( self ) : \n         pass   In the example above, when posting to  /exempted-post/  it will not require the CSRF token,\nhowever  /save-data/  requires it.", 
            "title": "Import"
        }, 
        {
            "location": "/ext/csrf/#config", 
            "text": "CSRF_COOKIE_NAME  # _csrf_token\n    CSRF_HEADER_NAME  # X-CSRFToken\n    CSRF_DISABLE\n    CSRF_COOKIE_TIMEOUT\n    CSRF_COOKIE_SECURE\n    CSRF_COOKIE_HTTPONLY\n    CSRF_COOKIE_DOMAIN\n    CSRF_CHECK_REFERER\n    SEASURF_INCLUDE_OR_EXEMPT_VIEWS  About  Extension:  flask-seasurf  SeaSurf is a Flask extension for preventing cross-site request forgery (CSRF).  CSRF vulnerabilities have been found in large and popular sites such as YouTube.\nThese attacks are problematic because the mechanism they use is relatively easy to exploit.\nThis extension attempts to aid you in securing your application from such attacks.", 
            "title": "Config"
        }, 
        {
            "location": "/ext/mail/", 
            "text": "Mail exposes an interface to send email via SMTP or AWS SES.\n\n\nImport\n\n\nfrom\n \nmocha\n \nimport\n \nsend_mail\n\n\n\n\n\n\nSend Mail\n\n\nSend mail helps you quickly send emails.\n\n\ntemplate = \n\nto = \nme@email.com\n\n\nsend_email(template=template, to=to)\n\n\n\n\n\nMail signals observer\n\n\nfrom\n \nmocha\n \nimport\n \nsignals\n\n\n\n@signals.send_email.observe\n\n\ndef\n \nmy_email_observer\n():\n\n    \npass\n\n\n\n\n\n\nMail interface\n\n\nfrom\n \nmocha.ext\n \nimport\n \nmail\n\n\n\n\n\n\nConfig\n\n\n# AWS SES\n\n\n# To use AWS SES to send email\n\n\n#:\n\n\n#: - To use the default AWS credentials (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY)\n\n\n#: set MAIL_URI = \nses://\n\n\n#: * To use a different credential:\n\n\n#: set MAIL_URI = \nses://{access_key}:{secret_key}@{region}\n\n\n#:\n\n\n#: *** uncomment if you are using SMTP instead\n\n\nMAIL_URI =\n \nses://\n\n\n\n# SMTP\n\n\n#: If you are using SMTP, it will use Flask-Mail\n\n\n#: The uri for the smtp connection. It will use Flask-Mail\n\n\n#: format: smtp://USERNAME:PASSWORD@HOST:PORT\n\n\n#: with sll -\n smtp+ssl://USERNAME:PASSWORD@HOST:PORT\n\n\n#: with ssl and tls -\n smtp+ssl+tls://USERNAME:PASSWORD@HOST:PORT\n\n\n#:\n\n\n#: *** comment out if you are using SES instead\n\n\n# MAIL_URI = \nsmtp+ssl://{username}:{password}@{host}:{port}\n\\\n\n\n#    .format(username=\n, password=\n, host=\nsmtp.gmail.com\n, port=465)\n\n\n\n#: MAIL_SENDER - The sender of the email by default\n\n\n#: For SES, this email must be authorized\n\n\nMAIL_SENDER =\n APPLICATION_ADMIN_EMAIL\n\n\n#: MAIL_REPLY_TO\n\n\n#: The email to reply to by default\n\n\nMAIL_REPLY_TO =\n APPLICATION_ADMIN_EMAIL\n\n\n#: MAIL_TEMPLATE\n\n\n#: a directory that contains the email template or a dict\n\n\nMAIL_TEMPLATE =\n os\n.\npath\n.\njoin\n(\nAPPLICATION_DATA_DIR\n,\n \nmail-templates\n)\n\n\n\n#: MAIL_TEMPLATE_CONTEXT\n\n\n#: a dict of all context to pass to the email by default\n\n\nMAIL_TEMPLATE_CONTEXT =\n \n{\n\n    \nsite_name\n:\n APPLICATION_NAME\n,\n\n    \nsite_url\n:\n APPLICATION_URL\n\n}\n\n\n\n\n\n\nAs a convenience, you can use \nsend_email()\n to send email.\n\n\nfrom\n \nmocha\n \nimport\n \nMocha\n,\n \nsend_email\n\n\n\nclass\n \nIndex\n(\nMocha\n):\n\n\n    \n@post\n()\n\n    \ndef\n \nsend\n():\n\n        \nrecipient\n \n=\n \nemail@email.com\n\n        \nsender\n \n=\n \nrequest\n.\nform\n.\nget\n(\nsender\n)\n\n        \nsubject\n \n=\n \nWelcome\n\n\n        \nmail\n.\nsend\n(\nto\n=\nrecipient\n,\n \nsender\n=\nsender\n,\n \nsubject\n=\nsubet\n)\n\n\n\n\n\n\nExtension: \nses-mailer\n\n\nExtension: \nflask-mail", 
            "title": "Mail"
        }, 
        {
            "location": "/ext/mail/#import", 
            "text": "from   mocha   import   send_mail", 
            "title": "Import"
        }, 
        {
            "location": "/ext/mail/#send-mail", 
            "text": "Send mail helps you quickly send emails.  template =  \nto =  me@email.com \n\nsend_email(template=template, to=to)", 
            "title": "Send Mail"
        }, 
        {
            "location": "/ext/mail/#mail-signals-observer", 
            "text": "from   mocha   import   signals  @signals.send_email.observe  def   my_email_observer (): \n     pass", 
            "title": "Mail signals observer"
        }, 
        {
            "location": "/ext/mail/#mail-interface", 
            "text": "from   mocha.ext   import   mail", 
            "title": "Mail interface"
        }, 
        {
            "location": "/ext/mail/#config", 
            "text": "# AWS SES  # To use AWS SES to send email  #:  #: - To use the default AWS credentials (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY)  #: set MAIL_URI =  ses://  #: * To use a different credential:  #: set MAIL_URI =  ses://{access_key}:{secret_key}@{region}  #:  #: *** uncomment if you are using SMTP instead  MAIL_URI =   ses://  # SMTP  #: If you are using SMTP, it will use Flask-Mail  #: The uri for the smtp connection. It will use Flask-Mail  #: format: smtp://USERNAME:PASSWORD@HOST:PORT  #: with sll -  smtp+ssl://USERNAME:PASSWORD@HOST:PORT  #: with ssl and tls -  smtp+ssl+tls://USERNAME:PASSWORD@HOST:PORT  #:  #: *** comment out if you are using SES instead  # MAIL_URI =  smtp+ssl://{username}:{password}@{host}:{port} \\  #    .format(username= , password= , host= smtp.gmail.com , port=465)  #: MAIL_SENDER - The sender of the email by default  #: For SES, this email must be authorized  MAIL_SENDER =  APPLICATION_ADMIN_EMAIL #: MAIL_REPLY_TO  #: The email to reply to by default  MAIL_REPLY_TO =  APPLICATION_ADMIN_EMAIL #: MAIL_TEMPLATE  #: a directory that contains the email template or a dict  MAIL_TEMPLATE =  os . path . join ( APPLICATION_DATA_DIR ,   mail-templates )  #: MAIL_TEMPLATE_CONTEXT  #: a dict of all context to pass to the email by default  MAIL_TEMPLATE_CONTEXT =   { \n     site_name :  APPLICATION_NAME , \n     site_url :  APPLICATION_URL }   As a convenience, you can use  send_email()  to send email.  from   mocha   import   Mocha ,   send_email  class   Index ( Mocha ): \n\n     @post () \n     def   send (): \n         recipient   =   email@email.com \n         sender   =   request . form . get ( sender ) \n         subject   =   Welcome \n\n         mail . send ( to = recipient ,   sender = sender ,   subject = subet )   Extension:  ses-mailer  Extension:  flask-mail", 
            "title": "Config"
        }, 
        {
            "location": "/ext/recaptcha/", 
            "text": "Recaptcha implements the Google recaptcha in your application.\n\n\nImport\n\n\nfrom\n \nmocha\n \nimport\n \nrecaptcha\n\n\n\n\n\n\nImplement in Jinja\n\n\nTo include the recaptcha in your template add the code below\n\n\n{{\n \nrecaptcha\n \n}}\n\n\n\n\n\n\nVerify code\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n\n    \ndef\n \nsend_data\n(\nself\n)\n:\n\n        \nif\n \nrecaptcha\n.\nverify\n()\n:\n\n            \n#\n \neverythings\n \nis\n \nok\n\n        \nelse\n:\n\n            \n#\n \nFAILED\n\n\n\n\n\n\nConfig\n\n\n#: Flask-Recaptcha\n#: Register your application at https://www.google.com/recaptcha/admin\n\n#: RECAPTCHA_ENABLED\nRECAPTCHA_ENABLED = True\n\n#: RECAPTCHA_SITE_KEY\nRECAPTCHA_SITE_KEY = \n\n\n#: RECAPTCHA_SECRET_KEY\nRECAPTCHA_SECRET_KEY = \n\n\n\n\n\n\nExtension: \nflask-recaptcha\n\n\nTo register your application go \nhttps://www.google.com/recaptcha/admin", 
            "title": "Recaptcha"
        }, 
        {
            "location": "/ext/recaptcha/#import", 
            "text": "from   mocha   import   recaptcha", 
            "title": "Import"
        }, 
        {
            "location": "/ext/recaptcha/#implement-in-jinja", 
            "text": "To include the recaptcha in your template add the code below  {{   recaptcha   }}", 
            "title": "Implement in Jinja"
        }, 
        {
            "location": "/ext/recaptcha/#verify-code", 
            "text": "class   Index ( Mocha ) : \n\n     def   send_data ( self ) : \n         if   recaptcha . verify () : \n             #   everythings   is   ok \n         else : \n             #   FAILED", 
            "title": "Verify code"
        }, 
        {
            "location": "/ext/recaptcha/#config", 
            "text": "#: Flask-Recaptcha\n#: Register your application at https://www.google.com/recaptcha/admin\n\n#: RECAPTCHA_ENABLED\nRECAPTCHA_ENABLED = True\n\n#: RECAPTCHA_SITE_KEY\nRECAPTCHA_SITE_KEY =  \n\n#: RECAPTCHA_SECRET_KEY\nRECAPTCHA_SECRET_KEY =    Extension:  flask-recaptcha  To register your application go  https://www.google.com/recaptcha/admin", 
            "title": "Config"
        }, 
        {
            "location": "/logging/", 
            "text": "Configuration", 
            "title": "Logging"
        }, 
        {
            "location": "/logging/#configuration", 
            "text": "", 
            "title": "Configuration"
        }, 
        {
            "location": "/contrib/", 
            "text": "Contrib\n\n\nContribs are ready to use embeddable applications to add in your \nINSTALLED_APPS\n \nto get going. They solved basic and common web development problems.\n\n\nThey are meant to be easy to install with less configurations possible.\n\n\nThey may also come decorations or helpers functions for external use.", 
            "title": "Contrib"
        }, 
        {
            "location": "/contrib/#contrib", 
            "text": "Contribs are ready to use embeddable applications to add in your  INSTALLED_APPS  \nto get going. They solved basic and common web development problems.  They are meant to be easy to install with less configurations possible.  They may also come decorations or helpers functions for external use.", 
            "title": "Contrib"
        }, 
        {
            "location": "/contrib/auth/", 
            "text": "mocha.contrib.auth\n\n\nAuth\n adds authentication to your application\n\n\nIt has 3 modules: \nAuthLogin\n, \nAuthAccount\n, \nAuthAdmin\n\n\nAuthLogin\n: Creates a login page, including signup, lost-password, reset-password, logout.\n\n\nAuthAccount\n: Creates an interface for the user to change their login and personal info.\n\n\nAuthAdmin\n: Creates an admin interface to manage the users.\n\n\nRequirements\n\n\nAfter you install it (for the first time) in \nINSTALLED_APPS\n, run the\ncommand \nmocha setup-models\n\n\nInstallation\n\n\nINSTALLED_APPS [\n    {\n        \napp\n: \nmocha.contrib.auth\n,\n        \ndb\n: \napplication.models.db\n,\n        \nmodules\n: {\n            \nlogin\n: {\n                \nroute\n: \n/\n\n            },\n            \naccount\n: {\n                \nroute\n: \n/account/\n\n            },\n            \nadmin\n: {\n                \nroute\n: \n/admin/users\n\n            }\n        },\n        \noptions\n: {\n            # for login and logout view\n            \nlogin_view\n: None,\n            \nlogout_view\n: None,\n\n            # permission\n            \nallow_signup\n: True,\n            \nallow_login\n: True,\n            \nallow_social_login\n: False,\n\n            # Verification\n            \nverify_email\n: False,\n            \nverify_email_token_ttl\n: 60 * 24,\n            \nverify_email_template\n: \nverify-email.txt\n,\n            \nverify_signup_email_template\n: \nverify-signup-email.txt\n,\n\n            # reset password\n            \nreset_password_method\n: \ntoken\n,  # token or password\n            \nreset_password_token_ttl\n: 60,  # in minutes\n            \nreset_password_email_template\n: \nreset-password.txt\n,\n\n        }\n    }\n\n]\n\n\n\n\n\nThe \nmodules\n contain the interface of what to use in \nAuth\n. If you don't\nwant to use certain module, just exclude it in the list.\n\nAuthLogin\n is required in your modules.\n\n\nie:\n\n\nFor Admin only\n\n\nINSTALLED_APPS [\n    {\n        \napp\n: \nmocha.contrib.auth\n,\n        \ndb\n: \napplication.models.db\n,\n        \nmodules\n: {\n            \nlogin\n: {\n                \nroute\n: \n/\n\n            },\n            \nadmin\n: {\n                \nroute\n: \n/admin/users\n\n            }\n        },\n        \noptions\n: {\n            \nallow_signup\n: False\n        }\n    }\n]\n\n\n\n\n\nFor User Account\n\n\nINSTALLED_APPS [\n    {\n        \napp\n: \nmocha.contrib.auth\n,\n        \ndb\n: \napplication.models.db\n,\n        \nmodules\n: {\n            \nlogin\n: {\n                \nroute\n: \n/\n\n            },\n            \naccount\n: {\n                \nroute\n: \n/account/\n\n            }\n        }\n    }\n]\n\n\n\n\n\nOptions\n\n\n- `login_view`: the view to redirect to after login. By default it will go to `Index:index`\n- `logout_view`: The view to redirect to after logout. By defaut it will go to `Index:index`\n- `allow_signup`: A boolean to allow people to signup or not. Default `False`\n- `allow_login`: A boolean to allow people to login or not. Default `True`\n- `allow_social_login`: A boolean to allow people to use social login to signup/signin. NOT IMPLEMENTED YET\n- `verify_email`: A boolean to require user to verify email before they can continue signing up. Default `False`\n- `verify_email_token_ttl`: The time in minutes for the token to live. Beyond that it will not work\n- `verify_email_template`: A custom email template for email verification\n- `verify_signup_email_template`: A custom email for verification when signing up\n- `reset_password_method`: `token` or `email`. The type of password reset to use. A `password` will send a password reset. A `token` will send an email containing a token to click on\n- `reset_password_token_ttl`: The time in minutes for the token to live. Beyond that it will not work\n- `reset_password_email_template`: A custom email for password email template\n\n\n\n\n\nAuth.Decorators\n\n\nAuth\n exposes some decorators to use in your application views endpoints\n\n\nImport:\n\n\nimport\n \nmocha.contrib.auth\n \nas\n \nauth\n\n\n\n\n\n\n@auth.authenticated\n : Require authentication to access an endpoint\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n\n    \n@auth\n.\nauthenticated\n\n    \ndef\n \nsecure_page\n(\nself\n)\n:\n\n        \nreturn\n\n\n\n\n\n\n@auth.unauthenticated\n : When a whole class require authetication, but you want to exclude certain page\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n    \ndecorators\n \n=\n \n[\nauth\n.\nauthenticated\n]\n\n\n    \ndef\n \nsecure_page\n(\nself\n)\n:\n\n        \nreturn\n\n\n    \n@auth\n.\nunauthenticated\n\n    \ndef\n \nnon_secure_page\n(\nself\n)\n:\n\n        \nreturn\n\n\n\n\n\n\n@auth.require_verified_email\n : To restrict endpoint access to only verified email users\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n\n    \n@auth\n.\nrequire_verified_email\n\n    \ndef\n \nsecure_page\n(\nself\n)\n:\n\n        \nreturn\n\n\n\n\n\n\n@auth.logout_user\n : Upon accessing this endpoint will automatically log user out\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n\n    \n@auth\n.\nlogout_user\n\n    \ndef\n \nsecure_page\n(\nself\n)\n:\n\n        \nreturn\n\n\n\n\n\n\n@auth.accepts_admin_roles\n : Force an endpoint to accept users to have at least \nADMIN\n roles\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n\n    \n@auth\n.\naccepts_admin_roles\n\n    \ndef\n \npage\n(\nself\n)\n:\n\n        \nreturn\n\n\n\n\n\n\n@auth.accepts_manager_roles\n : Force an endpoint to accept users to have at least \nMANAGER\n roles\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n\n    \n@auth\n.\naccepts_manager_roles\n\n    \ndef\n \npage\n(\nself\n)\n:\n\n        \nreturn\n\n\n\n\n\n\n@auth.accepts_contributor_roles\n : Force an endpoint to accept users to have at least \nCONTRIBUTOR\n roles\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n\n    \n@auth\n.\naccepts_contributor_roles\n\n    \ndef\n \npage\n(\nself\n)\n:\n\n        \nreturn\n\n\n\n\n\n\n@auth.accepts_moderator_roles\n : Force an endpoint to accept users to have at least \nMODERATOR\n roles\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n\n    \n@auth\n.\naccepts_moderator_roles\n\n    \ndef\n \npage\n(\nself\n)\n:\n\n        \nreturn\n\n\n\n\n\n\n@auth.accepts_roles(*roles)\n : Force an endpoint to accept users to have at one of the roles provided\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n\n    \n@auth\n.\naccepts_roles\n(\nadmin\n,\n \nmanager\n,\n \nmy-custom-role\n)\n\n    \ndef\n \npage\n(\nself\n)\n:\n\n        \nreturn\n\n\n\n\n\n\nAuth.Helpers\n\n\nAuth\n also exposes some helpers functions.\n\n\nImport:\n\n\nimport\n \nmocha.contrib.auth\n \nas\n \nauth\n\n\n\n\n\n\nauth.current_user\n returns the \nAuthUser\n object, containing the user info such as name, email, etc\n\n\nauth.is_authenticated()\n return True if the \ncurrent_user\n user is authenticated\n\n\nauth.not_authenticated()\n return True if the \ncurrent_user\n user is not authenticated\n\n\nauth.get_user(id)\n returns \nAuthUser\n by id.\n\n\nauth.authenticate_email(email, password)\n to Authenticate by email and password. returns \nAuthUserLogin\n\n\nAuth.signals\n\n\nAuth come with some signals to help you do something before and/or after a user perform a task, such as login,\nlogout, signup etc.\n\n\non_signup\n\n\nPre Signup\n\n\n@auth.signals.on_signup.pre.connect\ndef pre_signup(*a, *kw):\n    pass\n\n\n\n\n\nPost Signup\n\n\n@auth.signals.on_signup.post.connect\ndef post_signup(sender, emitter, result, *a, *kw):\n    pass\n\n\n\n\n\non_login\n\n\non_logout\n\n\nmake_user_secure_token\n\n\nget_user_from_secure_token\n\n\nget_user_id_secure_token", 
            "title": "Auth"
        }, 
        {
            "location": "/contrib/auth/#mochacontribauth", 
            "text": "Auth  adds authentication to your application  It has 3 modules:  AuthLogin ,  AuthAccount ,  AuthAdmin  AuthLogin : Creates a login page, including signup, lost-password, reset-password, logout.  AuthAccount : Creates an interface for the user to change their login and personal info.  AuthAdmin : Creates an admin interface to manage the users.  Requirements  After you install it (for the first time) in  INSTALLED_APPS , run the\ncommand  mocha setup-models  Installation  INSTALLED_APPS [\n    {\n         app :  mocha.contrib.auth ,\n         db :  application.models.db ,\n         modules : {\n             login : {\n                 route :  / \n            },\n             account : {\n                 route :  /account/ \n            },\n             admin : {\n                 route :  /admin/users \n            }\n        },\n         options : {\n            # for login and logout view\n             login_view : None,\n             logout_view : None,\n\n            # permission\n             allow_signup : True,\n             allow_login : True,\n             allow_social_login : False,\n\n            # Verification\n             verify_email : False,\n             verify_email_token_ttl : 60 * 24,\n             verify_email_template :  verify-email.txt ,\n             verify_signup_email_template :  verify-signup-email.txt ,\n\n            # reset password\n             reset_password_method :  token ,  # token or password\n             reset_password_token_ttl : 60,  # in minutes\n             reset_password_email_template :  reset-password.txt ,\n\n        }\n    }\n\n]  The  modules  contain the interface of what to use in  Auth . If you don't\nwant to use certain module, just exclude it in the list. AuthLogin  is required in your modules.  ie:  For Admin only  INSTALLED_APPS [\n    {\n         app :  mocha.contrib.auth ,\n         db :  application.models.db ,\n         modules : {\n             login : {\n                 route :  / \n            },\n             admin : {\n                 route :  /admin/users \n            }\n        },\n         options : {\n             allow_signup : False\n        }\n    }\n]  For User Account  INSTALLED_APPS [\n    {\n         app :  mocha.contrib.auth ,\n         db :  application.models.db ,\n         modules : {\n             login : {\n                 route :  / \n            },\n             account : {\n                 route :  /account/ \n            }\n        }\n    }\n]  Options  - `login_view`: the view to redirect to after login. By default it will go to `Index:index`\n- `logout_view`: The view to redirect to after logout. By defaut it will go to `Index:index`\n- `allow_signup`: A boolean to allow people to signup or not. Default `False`\n- `allow_login`: A boolean to allow people to login or not. Default `True`\n- `allow_social_login`: A boolean to allow people to use social login to signup/signin. NOT IMPLEMENTED YET\n- `verify_email`: A boolean to require user to verify email before they can continue signing up. Default `False`\n- `verify_email_token_ttl`: The time in minutes for the token to live. Beyond that it will not work\n- `verify_email_template`: A custom email template for email verification\n- `verify_signup_email_template`: A custom email for verification when signing up\n- `reset_password_method`: `token` or `email`. The type of password reset to use. A `password` will send a password reset. A `token` will send an email containing a token to click on\n- `reset_password_token_ttl`: The time in minutes for the token to live. Beyond that it will not work\n- `reset_password_email_template`: A custom email for password email template", 
            "title": "mocha.contrib.auth"
        }, 
        {
            "location": "/contrib/auth/#authdecorators", 
            "text": "Auth  exposes some decorators to use in your application views endpoints  Import:  import   mocha.contrib.auth   as   auth   @auth.authenticated  : Require authentication to access an endpoint  class   Index ( Mocha ) : \n\n     @auth . authenticated \n     def   secure_page ( self ) : \n         return   @auth.unauthenticated  : When a whole class require authetication, but you want to exclude certain page  class   Index ( Mocha ) : \n     decorators   =   [ auth . authenticated ] \n\n     def   secure_page ( self ) : \n         return \n\n     @auth . unauthenticated \n     def   non_secure_page ( self ) : \n         return   @auth.require_verified_email  : To restrict endpoint access to only verified email users  class   Index ( Mocha ) : \n\n     @auth . require_verified_email \n     def   secure_page ( self ) : \n         return   @auth.logout_user  : Upon accessing this endpoint will automatically log user out  class   Index ( Mocha ) : \n\n     @auth . logout_user \n     def   secure_page ( self ) : \n         return   @auth.accepts_admin_roles  : Force an endpoint to accept users to have at least  ADMIN  roles  class   Index ( Mocha ) : \n\n     @auth . accepts_admin_roles \n     def   page ( self ) : \n         return   @auth.accepts_manager_roles  : Force an endpoint to accept users to have at least  MANAGER  roles  class   Index ( Mocha ) : \n\n     @auth . accepts_manager_roles \n     def   page ( self ) : \n         return   @auth.accepts_contributor_roles  : Force an endpoint to accept users to have at least  CONTRIBUTOR  roles  class   Index ( Mocha ) : \n\n     @auth . accepts_contributor_roles \n     def   page ( self ) : \n         return   @auth.accepts_moderator_roles  : Force an endpoint to accept users to have at least  MODERATOR  roles  class   Index ( Mocha ) : \n\n     @auth . accepts_moderator_roles \n     def   page ( self ) : \n         return   @auth.accepts_roles(*roles)  : Force an endpoint to accept users to have at one of the roles provided  class   Index ( Mocha ) : \n\n     @auth . accepts_roles ( admin ,   manager ,   my-custom-role ) \n     def   page ( self ) : \n         return", 
            "title": "Auth.Decorators"
        }, 
        {
            "location": "/contrib/auth/#authhelpers", 
            "text": "Auth  also exposes some helpers functions.  Import:  import   mocha.contrib.auth   as   auth   auth.current_user  returns the  AuthUser  object, containing the user info such as name, email, etc  auth.is_authenticated()  return True if the  current_user  user is authenticated  auth.not_authenticated()  return True if the  current_user  user is not authenticated  auth.get_user(id)  returns  AuthUser  by id.  auth.authenticate_email(email, password)  to Authenticate by email and password. returns  AuthUserLogin", 
            "title": "Auth.Helpers"
        }, 
        {
            "location": "/contrib/auth/#authsignals", 
            "text": "Auth come with some signals to help you do something before and/or after a user perform a task, such as login,\nlogout, signup etc.  on_signup  Pre Signup  @auth.signals.on_signup.pre.connect\ndef pre_signup(*a, *kw):\n    pass  Post Signup  @auth.signals.on_signup.post.connect\ndef post_signup(sender, emitter, result, *a, *kw):\n    pass  on_login  on_logout  make_user_secure_token  get_user_from_secure_token  get_user_id_secure_token", 
            "title": "Auth.signals"
        }, 
        {
            "location": "/contrib/admin/", 
            "text": "Mocha makes it easy to turn your view classes into Admin area with restricted access.\n\n\nIt automatically setup the minimum permission, the layouts an everything.\n\n\nThis is simple accomplished by decorating your admin classes with \n@contrib.admin\n\n\nExample\n\n\nimport\n \nmocha.contrib\n\n\n\n@mocha.contrib.admin\n\n\nclass\n \nAdmin\n(\nMocha\n):\n\n\n    \ndef\n \nindex\n(\nself\n):\n\n        \npass\n\n\n    \ndef\n \nhello\n(\nself\n):\n\n        \npass\n\n\n\n\n\n\nConfig", 
            "title": "Admin"
        }, 
        {
            "location": "/contrib/admin/#example", 
            "text": "import   mocha.contrib  @mocha.contrib.admin  class   Admin ( Mocha ): \n\n     def   index ( self ): \n         pass \n\n     def   hello ( self ): \n         pass", 
            "title": "Example"
        }, 
        {
            "location": "/contrib/admin/#config", 
            "text": "", 
            "title": "Config"
        }, 
        {
            "location": "/contrib/contact-page/", 
            "text": "Contact Page\n\n\nmocha.contrib.views.contact_page\n\n\nAdds a contact page interface.\n\n\nInstallation\n\n\nCONTACT = (\nmocha.contrib.views.contact_page\n, {\n    \nroute\n: \n/contact/\n,\n    \nnav\n: {\n        \ntitle\n: \nContact\n,\n        \norder\n: 100\n    }\n    \nrecipients\n: \nrecipients@email.com\n,\n    \nsuccess_message\n: \nThe message to show when the email is sent successfully\n,\n    \ntitle\n: \nContact Us\n,\n    \nreturn_to\n: \n/\n\n})\n\nINSTALLED_APPS: [\n    CONTACT\n]\n\n\n\n\n\nOptions\n\n\n- `recipients`: The email address to send the message to\n\n- `return_to`: The view endpoint or url to return to\n\n- `title`: The page title\n\n- `success_message`: The message to show when the email is sent successfully", 
            "title": "Contact Page"
        }, 
        {
            "location": "/contrib/contact-page/#contact-page", 
            "text": "", 
            "title": "Contact Page"
        }, 
        {
            "location": "/contrib/contact-page/#mochacontribviewscontact_page", 
            "text": "Adds a contact page interface.  Installation  CONTACT = ( mocha.contrib.views.contact_page , {\n     route :  /contact/ ,\n     nav : {\n         title :  Contact ,\n         order : 100\n    }\n     recipients :  recipients@email.com ,\n     success_message :  The message to show when the email is sent successfully ,\n     title :  Contact Us ,\n     return_to :  / \n})\n\nINSTALLED_APPS: [\n    CONTACT\n]  Options  - `recipients`: The email address to send the message to\n\n- `return_to`: The view endpoint or url to return to\n\n- `title`: The page title\n\n- `success_message`: The message to show when the email is sent successfully", 
            "title": "mocha.contrib.views.contact_page"
        }, 
        {
            "location": "/contrib/error-page/", 
            "text": "Error Page\n\n\nmocha.contrib.error_page\n\n\nAdds error pages for 4xx, 5xx errors\n\n\nInstallation\n\n\nERROR_PAGE = (\nmocha.contrib.views.error_page\n, {})\n\nINSTALLED_APPS: [\n    ERROR_PAGE\n]\n\n\n\n\n\nOptions\n\n\n- `template`: If using a different template page", 
            "title": "Error Page"
        }, 
        {
            "location": "/contrib/error-page/#error-page", 
            "text": "", 
            "title": "Error Page"
        }, 
        {
            "location": "/contrib/error-page/#mochacontriberror_page", 
            "text": "Adds error pages for 4xx, 5xx errors  Installation  ERROR_PAGE = ( mocha.contrib.views.error_page , {})\n\nINSTALLED_APPS: [\n    ERROR_PAGE\n]  Options  - `template`: If using a different template page", 
            "title": "mocha.contrib.error_page"
        }, 
        {
            "location": "/contrib/maintenance-page/", 
            "text": "The contribs below are built in Mocha for developers convenience:\n\n\n\n\nMaintenance Page\n\n\nmocha.contrib.maintenance_page\n\n\nAutomatically show a maintenance page on the site. No pages will be able to be\naccessed.\n\n\nTo disable just comment out, or remove from the \nINSTALLED_APPS\n\n\nInstallation\n\n\nMAINTENANCE_PAGE = (\nmocha.contrib.views.maintenance_page\n, {\n    \non\n: False,\n    \nexcludes\n: []\n})\n\nINSTALLED_APPS: [\n    MAINTENANCE_PAGE\n]\n\n\n\n\n\nOptions\n\n\n- `template`: If using a different template page", 
            "title": "Error Page"
        }, 
        {
            "location": "/contrib/maintenance-page/#maintenance-page", 
            "text": "", 
            "title": "Maintenance Page"
        }, 
        {
            "location": "/contrib/maintenance-page/#mochacontribmaintenance_page", 
            "text": "Automatically show a maintenance page on the site. No pages will be able to be\naccessed.  To disable just comment out, or remove from the  INSTALLED_APPS  Installation  MAINTENANCE_PAGE = ( mocha.contrib.views.maintenance_page , {\n     on : False,\n     excludes : []\n})\n\nINSTALLED_APPS: [\n    MAINTENANCE_PAGE\n]  Options  - `template`: If using a different template page", 
            "title": "mocha.contrib.maintenance_page"
        }, 
        {
            "location": "/exceptions/", 
            "text": "Mocha exposes some ex\n\n\nfrom\n \nmocha\n \nimport\n \nexceptions\n\n\n\n\n\n\n\n\nMochaError\n\n\nMochaError\n is raised when there is an error in the core of Mocha\n\n\n\n\nAppError\n\n\nclass\n \nIndex\n(\nMocha\n)\n:\n\n\n    \ndef\n \nerror\n(\nself\n)\n:\n\n        \ntry\n:\n\n            \n#\n \nblah\n \nblah\n \ncode\n\n            \nraise\n \nexceptions\n.\nAppError\n(\nSomething bad happened..\n)\n\n        \nexcept\n \nexceptions\n.\nMochaError\n \nas\n \nae\n:\n            \nflash_error\n(\nae\n.\nmessage\n)\n\n\n\n\n\n\n\n\nModelError", 
            "title": "Exceptions"
        }, 
        {
            "location": "/exceptions/#mochaerror", 
            "text": "MochaError  is raised when there is an error in the core of Mocha", 
            "title": "MochaError"
        }, 
        {
            "location": "/exceptions/#apperror", 
            "text": "class   Index ( Mocha ) : \n\n     def   error ( self ) : \n         try : \n             #   blah   blah   code \n             raise   exceptions . AppError ( Something bad happened.. ) \n         except   exceptions . MochaError   as   ae :\n             flash_error ( ae . message )", 
            "title": "AppError"
        }, 
        {
            "location": "/exceptions/#modelerror", 
            "text": "", 
            "title": "ModelError"
        }, 
        {
            "location": "/cli/", 
            "text": "Mocha provides a command line tool to do sim\n\n\nmocha\n\n\n\n\n\n:init\n\n\nRunning init will initialize mocha in the current directory\n\n\nmocha\n \n:\ninit\n\n\n\n\n\n\n\n\n:serve\n\n\nRun the server in the development mode.\n\n\nmocha\n \n:\nserve\n\n\n\n\n\n\nBy default it will run the \nmain\n application in \nconfig.Dev\n environment\n\n\nTo change application and environment, prepend the app before mocha :serve\n\n\napp=main:production mocha :serve\n\n\n\n\n\nThe code above will run the \nmain\n application with the \nconfig.Production\n\n\napp=admin:stage mocha :serve\n\n\n\n\n\nThe code above will run \nadmin\n application with \nconfig.Stage\n\n\nenv=production mocha :serve\n\n\n\n\n\nThe code above will run the \nmain\n application with \nconfig.Production\n.\n\n\nWhen \napp\n is not provided, or only \nenv\n is provided, it will assume the app is \nmain\n\n\n\n\n:addview\n\n\nTo create a new view\n\n\nmocha\n \n:\naddview\n\n\n\n\n\n\n\n\n:install-assets\n\n\nTo install assets from \napplication/assets/package.json\n\n\nThis command requires \nnpm\n as it will run \nnpm install\n to install the assets\n\n\nmocha\n \n:\ninstall\n-\nassets\n\n\n\n\n\n\n\n\n:dbsync\n\n\nTo create new models in your DBMS.\n\n\nmocha\n \n:\ndbsync\n\n\n\n\n\n\n\n\n:assets2s3\n\n\nWhen \nconfig.ASSETS_DELIVERY_METHOD\n is \nS3\n, this util will allow you to upload\nyour assets to S3, and the application will automatically point all your assets\nto S3.\n\n\nmocha\n \n:\nassets2s3\n\n\n\n\n\n\nSince it will be in production or some other places other than local,\nyou may need to add the environment variables\n\n\napp=main:production mocha :assets2s3\n\n\n\n\n\n\n\nDevelop CLI\n\n\nYou can develop your own CLI to also attach to the \nmocha\n cli.\n\n\nThis will allow you to admin your application within one command line.\n\n\nMocha provides a CLI interface using \nclick\n\n\nCreate\n\n\nimport\n \nmocha.cli\n\n\nclass\n \nMyCLI\n(\nmocha\n.\ncli\n.\nCLI\n):\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \ncommand\n,\n \nclick\n):\n\n\n        \n@command\n(\nhello-world\n)\n\n        \ndef\n \nhello_world\n():\n\n            \n This is my hello world \n\n            \nprint\n(\nHello World!\n)\n\n\n\n        \n@command\n(\nadd-entry\n)\n\n        \n@click.argument\n(\nname\n)\n\n        \ndef\n \nadd_entry\n(\nname\n):\n\n            \n Add new entry \n\n            \nprint\n(\nName: \n%s\n \n%\n \nname\n)\n\n\n\n\n\n\nRunning\n\n\nmocha\n\n\n\n\n\nRunning the code above will show the follow\n\n\nCommands:\n  :addview                 Create a new view and template page\n  :assets2s3               Upload assets files to S3\n  :dbsync                  Sync database Create new tables etc...\n  :init                    Setup Mocha in the current directory\n  :install-assets          Install NPM Packages for the front end in the...\n  :serve                   Serve application in development mode\n  :version\n  add-entry                Add new entry\n  hello-world              This is my hellow word\n\n\n\n\n\nIf you run\n\n\nmocha hello-world\n\n\n\n\n\nIt will print out 'Hello World!'\n\n\nAnd...\n\n\nmocha add-entry Jonas\n\n\n\n\n\nwill print out 'Name: Jonas'\n\n\nHow does it work?\n\n\nMocha looks for all the subclasses of \nmocha.cli.CLI\n and instantiate them by\npassing the \nmocha.cli command\n scope, along with \nclick\n\n\nImporting application modules in the CLI\n\n\nTo import application modules, place them in \n__init__\n of the class, so Mocha\nhas the time to load all the necessary modules\n\n\nclass\n \nMyCLI\n(\nmocha\n.\ncli\n.\nCLI\n):\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \ncommand\n,\n \nclick\n):\n\n\n        \nimport\n \napplication.helpers\n \nas\n \nhelpers\n\n\n        \n@command\n(\nhello-world\n)\n\n        \ndef\n \nhello_world\n():\n\n            \n This is my hello world \n\n            \nprint\n(\nHello World!\n)", 
            "title": "CLI"
        }, 
        {
            "location": "/cli/#init", 
            "text": "Running init will initialize mocha in the current directory  mocha   : init", 
            "title": ":init"
        }, 
        {
            "location": "/cli/#serve", 
            "text": "Run the server in the development mode.  mocha   : serve   By default it will run the  main  application in  config.Dev  environment  To change application and environment, prepend the app before mocha :serve  app=main:production mocha :serve  The code above will run the  main  application with the  config.Production  app=admin:stage mocha :serve  The code above will run  admin  application with  config.Stage  env=production mocha :serve  The code above will run the  main  application with  config.Production .  When  app  is not provided, or only  env  is provided, it will assume the app is  main", 
            "title": ":serve"
        }, 
        {
            "location": "/cli/#addview", 
            "text": "To create a new view  mocha   : addview", 
            "title": ":addview"
        }, 
        {
            "location": "/cli/#install-assets", 
            "text": "To install assets from  application/assets/package.json  This command requires  npm  as it will run  npm install  to install the assets  mocha   : install - assets", 
            "title": ":install-assets"
        }, 
        {
            "location": "/cli/#dbsync", 
            "text": "To create new models in your DBMS.  mocha   : dbsync", 
            "title": ":dbsync"
        }, 
        {
            "location": "/cli/#assets2s3", 
            "text": "When  config.ASSETS_DELIVERY_METHOD  is  S3 , this util will allow you to upload\nyour assets to S3, and the application will automatically point all your assets\nto S3.  mocha   : assets2s3   Since it will be in production or some other places other than local,\nyou may need to add the environment variables  app=main:production mocha :assets2s3", 
            "title": ":assets2s3"
        }, 
        {
            "location": "/cli/#develop-cli", 
            "text": "You can develop your own CLI to also attach to the  mocha  cli.  This will allow you to admin your application within one command line.  Mocha provides a CLI interface using  click", 
            "title": "Develop CLI"
        }, 
        {
            "location": "/cli/#create", 
            "text": "import   mocha.cli  class   MyCLI ( mocha . cli . CLI ): \n\n     def   __init__ ( self ,   command ,   click ): \n\n         @command ( hello-world ) \n         def   hello_world (): \n              This is my hello world  \n             print ( Hello World! ) \n\n\n         @command ( add-entry ) \n         @click.argument ( name ) \n         def   add_entry ( name ): \n              Add new entry  \n             print ( Name:  %s   %   name )", 
            "title": "Create"
        }, 
        {
            "location": "/cli/#running", 
            "text": "mocha  Running the code above will show the follow  Commands:\n  :addview                 Create a new view and template page\n  :assets2s3               Upload assets files to S3\n  :dbsync                  Sync database Create new tables etc...\n  :init                    Setup Mocha in the current directory\n  :install-assets          Install NPM Packages for the front end in the...\n  :serve                   Serve application in development mode\n  :version\n  add-entry                Add new entry\n  hello-world              This is my hellow word  If you run  mocha hello-world  It will print out 'Hello World!'  And...  mocha add-entry Jonas  will print out 'Name: Jonas'", 
            "title": "Running"
        }, 
        {
            "location": "/cli/#how-does-it-work", 
            "text": "Mocha looks for all the subclasses of  mocha.cli.CLI  and instantiate them by\npassing the  mocha.cli command  scope, along with  click", 
            "title": "How does it work?"
        }, 
        {
            "location": "/cli/#importing-application-modules-in-the-cli", 
            "text": "To import application modules, place them in  __init__  of the class, so Mocha\nhas the time to load all the necessary modules  class   MyCLI ( mocha . cli . CLI ): \n\n     def   __init__ ( self ,   command ,   click ): \n\n         import   application.helpers   as   helpers \n\n         @command ( hello-world ) \n         def   hello_world (): \n              This is my hello world  \n             print ( Hello World! )", 
            "title": "Importing application modules in the CLI"
        }, 
        {
            "location": "/deploy/", 
            "text": "Deployment\n\n\nYes, yes, deploying Python app is not as easy as let's j. \n\n\nSo let me introduce to you \nPropel\n\n\nI created \n\n\nDeploy to Production\n\n\nNow your application is ready, it is time to deploy in production.\n\n\nWhile there many other options, I'm more familiar with \nPropel\n and Gunicorn.\n\n\n\n\n\n\nWith \nPropel\n\n\npropel -w\n\n\n\n\n\n\n\n\n\nOn Gunicorn\n\n\ngunicorn app_www:app", 
            "title": "Deployment"
        }, 
        {
            "location": "/deploy/#deployment", 
            "text": "Yes, yes, deploying Python app is not as easy as let's j.   So let me introduce to you  Propel  I created", 
            "title": "Deployment"
        }, 
        {
            "location": "/deploy/#deploy-to-production", 
            "text": "Now your application is ready, it is time to deploy in production.  While there many other options, I'm more familiar with  Propel  and Gunicorn.    With  Propel  propel -w    On Gunicorn  gunicorn app_www:app", 
            "title": "Deploy to Production"
        }
    ]
}